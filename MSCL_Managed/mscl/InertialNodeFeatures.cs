//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class InertialNodeFeatures : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InertialNodeFeatures(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InertialNodeFeatures obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~InertialNodeFeatures() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_InertialNodeFeatures(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool supportsCategory(InertialTypes.InertialCategory category) {
    bool ret = msclPINVOKE.InertialNodeFeatures_supportsCategory(swigCPtr, (int)category);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool supportsCommand(InertialTypes.Command commandId) {
    bool ret = msclPINVOKE.InertialNodeFeatures_supportsCommand(swigCPtr, (int)commandId);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InertialCommands supportedCommands() {
    InertialCommands ret = new InertialCommands(msclPINVOKE.InertialNodeFeatures_supportedCommands(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public InertialChannelFields supportedChannelFields(InertialTypes.InertialCategory category) {
    InertialChannelFields ret = new InertialChannelFields(msclPINVOKE.InertialNodeFeatures_supportedChannelFields(swigCPtr, (int)category), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SampleRates supportedSampleRates(InertialTypes.InertialCategory category) {
    SampleRates ret = new SampleRates(msclPINVOKE.InertialNodeFeatures_supportedSampleRates(swigCPtr, (int)category), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
