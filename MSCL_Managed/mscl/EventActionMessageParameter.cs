//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EventActionMessageParameter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventActionMessageParameter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventActionMessageParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventActionMessageParameter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EventActionMessageParameter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SampleRate sampleRate {
    set {
      msclPINVOKE.EventActionMessageParameter_sampleRate_set(swigCPtr, SampleRate.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.EventActionMessageParameter_sampleRate_get(swigCPtr);
      SampleRate ret = (cPtr == global::System.IntPtr.Zero) ? null : new SampleRate(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MipTypes.DataClass dataClass() {
    MipTypes.DataClass ret = (MipTypes.DataClass)msclPINVOKE.EventActionMessageParameter_dataClass(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setChannelFields(MipTypes.DataClass dataClass, MipChannelFields fields) {
    msclPINVOKE.EventActionMessageParameter_setChannelFields(swigCPtr, (int)dataClass, MipChannelFields.getCPtr(fields));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MipChannelFields getChannelFields() {
    MipChannelFields ret = new MipChannelFields(msclPINVOKE.EventActionMessageParameter_getChannelFields(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EventActionMessageParameter() : this(msclPINVOKE.new_EventActionMessageParameter(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly byte MAX_DESCRIPTORS = msclPINVOKE.EventActionMessageParameter_MAX_DESCRIPTORS_get();
}

}
