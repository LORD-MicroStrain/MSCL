//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EventTriggerThresholdParameter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventTriggerThresholdParameter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventTriggerThresholdParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventTriggerThresholdParameter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EventTriggerThresholdParameter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public EventTriggerThresholdParameter.Type type {
    set {
      msclPINVOKE.EventTriggerThresholdParameter_type_set(swigCPtr, (int)value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      EventTriggerThresholdParameter.Type ret = (EventTriggerThresholdParameter.Type)msclPINVOKE.EventTriggerThresholdParameter_type_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double lowThreshold {
    set {
      msclPINVOKE.EventTriggerThresholdParameter_lowThreshold_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = msclPINVOKE.EventTriggerThresholdParameter_lowThreshold_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double highThreshold {
    set {
      msclPINVOKE.EventTriggerThresholdParameter_highThreshold_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = msclPINVOKE.EventTriggerThresholdParameter_highThreshold_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void channel(MipTypes.ChannelField channelField, MipTypes.ChannelQualifier channelQualifier) {
    msclPINVOKE.EventTriggerThresholdParameter_channel__SWIG_0(swigCPtr, (int)channelField, (int)channelQualifier);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void channel(MipTypes.ChannelField channelField, byte index) {
    msclPINVOKE.EventTriggerThresholdParameter_channel__SWIG_1(swigCPtr, (int)channelField, index);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MipTypes.ChannelField channelField() {
    MipTypes.ChannelField ret = (MipTypes.ChannelField)msclPINVOKE.EventTriggerThresholdParameter_channelField(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipTypes.ChannelQualifier channelQualifier() {
    MipTypes.ChannelQualifier ret = (MipTypes.ChannelQualifier)msclPINVOKE.EventTriggerThresholdParameter_channelQualifier(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte channelIndex() {
    byte ret = msclPINVOKE.EventTriggerThresholdParameter_channelIndex(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EventTriggerThresholdParameter() : this(msclPINVOKE.new_EventTriggerThresholdParameter(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Type {
    WINDOW_TYPE = 0x01,
    INTERVAL_TYPE = 0x02
  }

}

}
