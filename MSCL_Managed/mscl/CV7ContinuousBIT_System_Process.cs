//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class CV7ContinuousBIT_System_Process : ContinuousBIT_System_Process {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CV7ContinuousBIT_System_Process(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.CV7ContinuousBIT_System_Process_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CV7ContinuousBIT_System_Process obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_CV7ContinuousBIT_System_Process(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CV7ContinuousBIT_System_Process() : this(msclPINVOKE.new_CV7ContinuousBIT_System_Process__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public CV7ContinuousBIT_System_Process(ushort bits) : this(msclPINVOKE.new_CV7ContinuousBIT_System_Process__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool imuProcessFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_imuProcessFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool imuRateMismatch() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_imuRateMismatch(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool imuDroppedData() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_imuDroppedData(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool imuStuck() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_imuStuck(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool filterProcessFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_filterProcessFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool filterDroppedData() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_filterDroppedData(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool filterRateMismatch() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_filterRateMismatch(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool filterStuck() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_System_Process_filterStuck(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly ushort IMU_PROCESS_FAULT = msclPINVOKE.CV7ContinuousBIT_System_Process_IMU_PROCESS_FAULT_get();
  public static readonly ushort IMU_RATE_MISMATCH = msclPINVOKE.CV7ContinuousBIT_System_Process_IMU_RATE_MISMATCH_get();
  public static readonly ushort IMU_DROPPED_DATA = msclPINVOKE.CV7ContinuousBIT_System_Process_IMU_DROPPED_DATA_get();
  public static readonly ushort IMU_STUCK = msclPINVOKE.CV7ContinuousBIT_System_Process_IMU_STUCK_get();
  public static readonly ushort FILTER_PROCESS_FAULT = msclPINVOKE.CV7ContinuousBIT_System_Process_FILTER_PROCESS_FAULT_get();
  public static readonly ushort FILTER_DROPPED_DATA = msclPINVOKE.CV7ContinuousBIT_System_Process_FILTER_DROPPED_DATA_get();
  public static readonly ushort FILTER_RATE_MISMATCH = msclPINVOKE.CV7ContinuousBIT_System_Process_FILTER_RATE_MISMATCH_get();
  public static readonly ushort FILTER_STUCK = msclPINVOKE.CV7ContinuousBIT_System_Process_FILTER_STUCK_get();
}

}
