//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EulerAngles : Vector {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal EulerAngles(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.EulerAngles_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EulerAngles obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EulerAngles(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public EulerAngles() : this(msclPINVOKE.new_EulerAngles__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EulerAngles(float roll, float pitch, float yaw) : this(msclPINVOKE.new_EulerAngles__SWIG_1(roll, pitch, yaw), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EulerAngles(MipFieldValues data, byte offset) : this(msclPINVOKE.new_EulerAngles__SWIG_2(MipFieldValues.getCPtr(data), offset), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EulerAngles(MipFieldValues data) : this(msclPINVOKE.new_EulerAngles__SWIG_3(MipFieldValues.getCPtr(data)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MipFieldValues asMipFieldValues() {
    MipFieldValues ret = new MipFieldValues(msclPINVOKE.EulerAngles_asMipFieldValues(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void appendMipFieldValues(MipFieldValues appendTo) {
    msclPINVOKE.EulerAngles_appendMipFieldValues(swigCPtr, MipFieldValues.getCPtr(appendTo));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float roll() {
    float ret = msclPINVOKE.EulerAngles_roll(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float pitch() {
    float ret = msclPINVOKE.EulerAngles_pitch(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float yaw() {
    float ret = msclPINVOKE.EulerAngles_yaw(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float heading() {
    float ret = msclPINVOKE.EulerAngles_heading(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
