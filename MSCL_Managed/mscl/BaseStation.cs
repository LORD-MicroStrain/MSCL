//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class BaseStation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseStation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseStation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseStation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_BaseStation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BaseStation(Connection connection) : this(msclPINVOKE.new_BaseStation__SWIG_0(Connection.getCPtr(connection)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseStation(Connection connection, ulong baseTimeout) : this(msclPINVOKE.new_BaseStation__SWIG_1(Connection.getCPtr(connection), baseTimeout), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BaseStation Mock(BaseStationInfo info) {
    BaseStation ret = new BaseStation(msclPINVOKE.BaseStation_Mock__SWIG_0(BaseStationInfo.getCPtr(info)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseStation Mock() {
    BaseStation ret = new BaseStation(msclPINVOKE.BaseStation_Mock__SWIG_1(), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string deviceName(string serial) {
    string ret = msclPINVOKE.BaseStation_deviceName(serial);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Connection connection() {
    Connection ret = new Connection(msclPINVOKE.BaseStation_connection(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BaseStationFeatures features() {
    BaseStationFeatures ret = new BaseStationFeatures(msclPINVOKE.BaseStation_features(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp lastCommunicationTime() {
    Timestamp ret = new Timestamp(msclPINVOKE.BaseStation_lastCommunicationTime(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void readWriteRetries(byte numRetries) {
    msclPINVOKE.BaseStation_readWriteRetries__SWIG_0(swigCPtr, numRetries);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte readWriteRetries() {
    byte ret = msclPINVOKE.BaseStation_readWriteRetries__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void useEepromCache(bool useCache) {
    msclPINVOKE.BaseStation_useEepromCache(swigCPtr, useCache);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearEepromCache() {
    msclPINVOKE.BaseStation_clearEepromCache(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.Frequency frequency() {
    WirelessTypes.Frequency ret = (WirelessTypes.Frequency)msclPINVOKE.BaseStation_frequency(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.CommProtocol communicationProtocol() {
    WirelessTypes.CommProtocol ret = (WirelessTypes.CommProtocol)msclPINVOKE.BaseStation_communicationProtocol(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Version firmwareVersion() {
    Version ret = new Version(msclPINVOKE.BaseStation_firmwareVersion(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessModels.BaseModel model() {
    WirelessModels.BaseModel ret = (WirelessModels.BaseModel)msclPINVOKE.BaseStation_model(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string serial() {
    string ret = msclPINVOKE.BaseStation_serial(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string name() {
    string ret = msclPINVOKE.BaseStation_name(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.MicroControllerType microcontroller() {
    WirelessTypes.MicroControllerType ret = (WirelessTypes.MicroControllerType)msclPINVOKE.BaseStation_microcontroller(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.RegionCode regionCode() {
    WirelessTypes.RegionCode ret = (WirelessTypes.RegionCode)msclPINVOKE.BaseStation_regionCode(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataSweeps getData(uint timeout, uint maxSweeps) {
    DataSweeps ret = new DataSweeps(msclPINVOKE.BaseStation_getData__SWIG_0(swigCPtr, timeout, maxSweeps), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataSweeps getData(uint timeout) {
    DataSweeps ret = new DataSweeps(msclPINVOKE.BaseStation_getData__SWIG_1(swigCPtr, timeout), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataSweeps getData() {
    DataSweeps ret = new DataSweeps(msclPINVOKE.BaseStation_getData__SWIG_2(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint totalData() {
    uint ret = msclPINVOKE.BaseStation_totalData(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NodeDiscoveries getNodeDiscoveries() {
    NodeDiscoveries ret = new NodeDiscoveries(msclPINVOKE.BaseStation_getNodeDiscoveries(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void timeout(ulong timeout) {
    msclPINVOKE.BaseStation_timeout__SWIG_0(swigCPtr, timeout);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong timeout() {
    ulong ret = msclPINVOKE.BaseStation_timeout__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ping() {
    bool ret = msclPINVOKE.BaseStation_ping(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort readEeprom(ushort eepromAddress) {
    ushort ret = msclPINVOKE.BaseStation_readEeprom(swigCPtr, eepromAddress);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void writeEeprom(ushort eepromAddress, ushort value) {
    msclPINVOKE.BaseStation_writeEeprom(swigCPtr, eepromAddress, value);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timestamp enableBeacon() {
    Timestamp ret = new Timestamp(msclPINVOKE.BaseStation_enableBeacon__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp enableBeacon(uint utcTime) {
    Timestamp ret = new Timestamp(msclPINVOKE.BaseStation_enableBeacon__SWIG_1(swigCPtr, utcTime), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void disableBeacon() {
    msclPINVOKE.BaseStation_disableBeacon(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public BeaconStatus beaconStatus() {
    BeaconStatus ret = new BeaconStatus(msclPINVOKE.BaseStation_beaconStatus(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void startRfSweepMode() {
    msclPINVOKE.BaseStation_startRfSweepMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startRfSweepMode(uint minFreq, uint maxFreq, uint interval, ushort options) {
    msclPINVOKE.BaseStation_startRfSweepMode__SWIG_1(swigCPtr, minFreq, maxFreq, interval, options);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startRfSweepMode(uint minFreq, uint maxFreq, uint interval) {
    msclPINVOKE.BaseStation_startRfSweepMode__SWIG_2(swigCPtr, minFreq, maxFreq, interval);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cyclePower(bool checkComm) {
    msclPINVOKE.BaseStation_cyclePower__SWIG_0(swigCPtr, checkComm);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cyclePower() {
    msclPINVOKE.BaseStation_cyclePower__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetRadio() {
    msclPINVOKE.BaseStation_resetRadio(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void changeFrequency(WirelessTypes.Frequency frequency) {
    msclPINVOKE.BaseStation_changeFrequency(swigCPtr, (int)frequency);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetToIdleStatus broadcastSetToIdle() {
    SetToIdleStatus ret = new SetToIdleStatus(msclPINVOKE.BaseStation_broadcastSetToIdle(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool verifyConfig(BaseStationConfig config, ConfigIssues outIssues) {
    bool ret = msclPINVOKE.BaseStation_verifyConfig(swigCPtr, BaseStationConfig.getCPtr(config), ConfigIssues.getCPtr(outIssues));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void applyConfig(BaseStationConfig config) {
    msclPINVOKE.BaseStation_applyConfig(swigCPtr, BaseStationConfig.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.TransmitPower getTransmitPower() {
    WirelessTypes.TransmitPower ret = (WirelessTypes.TransmitPower)msclPINVOKE.BaseStation_getTransmitPower(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BaseStationButton getButtonLongPress(byte buttonNumber) {
    BaseStationButton ret = new BaseStationButton(msclPINVOKE.BaseStation_getButtonLongPress(swigCPtr, buttonNumber), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BaseStationButton getButtonShortPress(byte buttonNumber) {
    BaseStationButton ret = new BaseStationButton(msclPINVOKE.BaseStation_getButtonShortPress(swigCPtr, buttonNumber), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getAnalogPairingEnabled() {
    bool ret = msclPINVOKE.BaseStation_getAnalogPairingEnabled(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getAnalogTimeoutTime() {
    ushort ret = msclPINVOKE.BaseStation_getAnalogTimeoutTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getAnalogTimeoutVoltage() {
    float ret = msclPINVOKE.BaseStation_getAnalogTimeoutVoltage(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getAnalogExceedanceEnabled() {
    bool ret = msclPINVOKE.BaseStation_getAnalogExceedanceEnabled(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BaseStationAnalogPair getAnalogPair(byte portNumber) {
    BaseStationAnalogPair ret = new BaseStationAnalogPair(msclPINVOKE.BaseStation_getAnalogPair(swigCPtr, portNumber), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly ulong BASE_COMMANDS_DEFAULT_TIMEOUT = msclPINVOKE.BaseStation_BASE_COMMANDS_DEFAULT_TIMEOUT_get();
  public static readonly ulong ETHERNET_BASE_COMMANDS_DEFAULT_TIMEOUT = msclPINVOKE.BaseStation_ETHERNET_BASE_COMMANDS_DEFAULT_TIMEOUT_get();
  public static readonly uint BROADCAST_NODE_ADDRESS = msclPINVOKE.BaseStation_BROADCAST_NODE_ADDRESS_get();
  public static readonly uint BROADCAST_NODE_ADDRESS_ASPP3 = msclPINVOKE.BaseStation_BROADCAST_NODE_ADDRESS_ASPP3_get();
}

}
