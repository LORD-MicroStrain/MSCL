//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class BaseStationAnalogPair : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseStationAnalogPair(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BaseStationAnalogPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseStationAnalogPair() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_BaseStationAnalogPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static float CHANNEL_NOT_FLOAT {
    get {
      float ret = msclPINVOKE.BaseStationAnalogPair_CHANNEL_NOT_FLOAT_get();
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public BaseStationAnalogPair() : this(msclPINVOKE.new_BaseStationAnalogPair(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BaseStationAnalogPair Float(ushort nodeAddress, byte nodeChannel, float output_0V, float output_3V) {
    BaseStationAnalogPair ret = new BaseStationAnalogPair(msclPINVOKE.BaseStationAnalogPair_Float(nodeAddress, nodeChannel, output_0V, output_3V), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseStationAnalogPair NonFloat(ushort nodeAddress, byte nodeChannel) {
    BaseStationAnalogPair ret = new BaseStationAnalogPair(msclPINVOKE.BaseStationAnalogPair_NonFloat(nodeAddress, nodeChannel), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort nodeAddress() {
    ushort ret = msclPINVOKE.BaseStationAnalogPair_nodeAddress__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void nodeAddress(ushort address) {
    msclPINVOKE.BaseStationAnalogPair_nodeAddress__SWIG_1(swigCPtr, address);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte nodeChannel() {
    byte ret = msclPINVOKE.BaseStationAnalogPair_nodeChannel__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void nodeChannel(byte channelNumber) {
    msclPINVOKE.BaseStationAnalogPair_nodeChannel__SWIG_1(swigCPtr, channelNumber);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool expectFloatData() {
    bool ret = msclPINVOKE.BaseStationAnalogPair_expectFloatData__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void expectFloatData(bool enable) {
    msclPINVOKE.BaseStationAnalogPair_expectFloatData__SWIG_1(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float outputVal_0V() {
    float ret = msclPINVOKE.BaseStationAnalogPair_outputVal_0V__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void outputVal_0V(float value) {
    msclPINVOKE.BaseStationAnalogPair_outputVal_0V__SWIG_1(swigCPtr, value);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float outputVal_3V() {
    float ret = msclPINVOKE.BaseStationAnalogPair_outputVal_3V__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void outputVal_3V(float value) {
    msclPINVOKE.BaseStationAnalogPair_outputVal_3V__SWIG_1(swigCPtr, value);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
