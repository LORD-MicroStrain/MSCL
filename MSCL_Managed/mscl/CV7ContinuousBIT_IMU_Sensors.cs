//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class CV7ContinuousBIT_IMU_Sensors : Bitfield {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CV7ContinuousBIT_IMU_Sensors(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CV7ContinuousBIT_IMU_Sensors obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_CV7ContinuousBIT_IMU_Sensors(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CV7ContinuousBIT_IMU_Sensors() : this(msclPINVOKE.new_CV7ContinuousBIT_IMU_Sensors__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public CV7ContinuousBIT_IMU_Sensors(ushort bits) : this(msclPINVOKE.new_CV7ContinuousBIT_IMU_Sensors__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort flags() {
    ushort ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_flags(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool accelGeneralFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_accelGeneralFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool accelOverrange() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_accelOverrange(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool accelSelfTestFail() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_accelSelfTestFail(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool gyroGeneralFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_gyroGeneralFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool gyroOverrange() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_gyroOverrange(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool gyroSelfTestFail() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_gyroSelfTestFail(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool magGeneralFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_magGeneralFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool magOverrange() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_magOverrange(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool magSelfTestFail() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_magSelfTestFail(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pressureGeneralFault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_pressureGeneralFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pressureOverrange() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_pressureOverrange(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool pressureSelfTestFail() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_pressureSelfTestFail(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly ushort ACCEL_GENERAL_FAULT = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_ACCEL_GENERAL_FAULT_get();
  public static readonly ushort ACCEL_OVERRANGE = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_ACCEL_OVERRANGE_get();
  public static readonly ushort ACCEL_SELF_TEST_FAIL = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_ACCEL_SELF_TEST_FAIL_get();
  public static readonly ushort GYRO_GENERAL_FAULT = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_GYRO_GENERAL_FAULT_get();
  public static readonly ushort GYRO_OVERRANGE = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_GYRO_OVERRANGE_get();
  public static readonly ushort GYRO_SELF_TEST_FAIL = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_GYRO_SELF_TEST_FAIL_get();
  public static readonly ushort MAG_GENERAL_FAULT = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_MAG_GENERAL_FAULT_get();
  public static readonly ushort MAG_OVERRANGE = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_MAG_OVERRANGE_get();
  public static readonly ushort MAG_SELF_TEST_FAIL = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_MAG_SELF_TEST_FAIL_get();
  public static readonly ushort PRESSURE_GENERAL_FAULT = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_PRESSURE_GENERAL_FAULT_get();
  public static readonly ushort PRESSURE_OVERRANGE = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_PRESSURE_OVERRANGE_get();
  public static readonly ushort PRESSURE_SELF_TEST_FAIL = msclPINVOKE.CV7ContinuousBIT_IMU_Sensors_PRESSURE_SELF_TEST_FAIL_get();
}

}
