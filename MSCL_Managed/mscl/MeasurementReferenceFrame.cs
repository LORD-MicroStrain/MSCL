//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class MeasurementReferenceFrame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MeasurementReferenceFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeasurementReferenceFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeasurementReferenceFrame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_MeasurementReferenceFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MeasurementReferenceFrame() : this(msclPINVOKE.new_MeasurementReferenceFrame__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MeasurementReferenceFrame(PositionOffset translation, Rotation rotation) : this(msclPINVOKE.new_MeasurementReferenceFrame__SWIG_1(PositionOffset.getCPtr(translation), Rotation.getCPtr(rotation)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MeasurementReferenceFrame(MipFieldValues data, byte offset) : this(msclPINVOKE.new_MeasurementReferenceFrame__SWIG_2(MipFieldValues.getCPtr(data), offset), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MeasurementReferenceFrame(MipFieldValues data) : this(msclPINVOKE.new_MeasurementReferenceFrame__SWIG_3(MipFieldValues.getCPtr(data)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MipFieldValues asMipFieldValues() {
    MipFieldValues ret = new MipFieldValues(msclPINVOKE.MeasurementReferenceFrame_asMipFieldValues(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void appendMipFieldValues(MipFieldValues appendTo) {
    msclPINVOKE.MeasurementReferenceFrame_appendMipFieldValues(swigCPtr, MipFieldValues.getCPtr(appendTo));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset translation() {
    PositionOffset ret = new PositionOffset(msclPINVOKE.MeasurementReferenceFrame_translation__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void translation(PositionOffset translation) {
    msclPINVOKE.MeasurementReferenceFrame_translation__SWIG_1(swigCPtr, PositionOffset.getCPtr(translation));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation rotation() {
    Rotation ret = new Rotation(msclPINVOKE.MeasurementReferenceFrame_rotation__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void rotation(Rotation rotation) {
    msclPINVOKE.MeasurementReferenceFrame_rotation__SWIG_1(swigCPtr, Rotation.getCPtr(rotation));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
