//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class GQ7ContinuousBIT_System : ContinuousBIT_System {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GQ7ContinuousBIT_System(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.GQ7ContinuousBIT_System_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GQ7ContinuousBIT_System obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_GQ7ContinuousBIT_System(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public GQ7ContinuousBIT_System() : this(msclPINVOKE.new_GQ7ContinuousBIT_System__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GQ7ContinuousBIT_System(uint bits) : this(msclPINVOKE.new_GQ7ContinuousBIT_System__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GQ7ContinuousBIT_System_General general() {
    GQ7ContinuousBIT_System_General ret = new GQ7ContinuousBIT_System_General(msclPINVOKE.GQ7ContinuousBIT_System_general(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GQ7ContinuousBIT_System_Process process() {
    GQ7ContinuousBIT_System_Process ret = new GQ7ContinuousBIT_System_Process(msclPINVOKE.GQ7ContinuousBIT_System_process(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
