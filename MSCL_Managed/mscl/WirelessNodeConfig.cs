//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class WirelessNodeConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WirelessNodeConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WirelessNodeConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WirelessNodeConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_WirelessNodeConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public WirelessNodeConfig() : this(msclPINVOKE.new_WirelessNodeConfig(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.DefaultMode defaultMode() {
    WirelessTypes.DefaultMode ret = (WirelessTypes.DefaultMode)msclPINVOKE.WirelessNodeConfig_defaultMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void defaultMode(WirelessTypes.DefaultMode mode) {
    msclPINVOKE.WirelessNodeConfig_defaultMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort inactivityTimeout() {
    ushort ret = msclPINVOKE.WirelessNodeConfig_inactivityTimeout__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void inactivityTimeout(ushort timeout) {
    msclPINVOKE.WirelessNodeConfig_inactivityTimeout__SWIG_1(swigCPtr, timeout);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte checkRadioInterval() {
    byte ret = msclPINVOKE.WirelessNodeConfig_checkRadioInterval__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void checkRadioInterval(byte interval) {
    msclPINVOKE.WirelessNodeConfig_checkRadioInterval__SWIG_1(swigCPtr, interval);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.TransmitPower transmitPower() {
    WirelessTypes.TransmitPower ret = (WirelessTypes.TransmitPower)msclPINVOKE.WirelessNodeConfig_transmitPower__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void transmitPower(WirelessTypes.TransmitPower power) {
    msclPINVOKE.WirelessNodeConfig_transmitPower__SWIG_1(swigCPtr, (int)power);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.SamplingMode samplingMode() {
    WirelessTypes.SamplingMode ret = (WirelessTypes.SamplingMode)msclPINVOKE.WirelessNodeConfig_samplingMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void samplingMode(WirelessTypes.SamplingMode mode) {
    msclPINVOKE.WirelessNodeConfig_samplingMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.WirelessSampleRate sampleRate() {
    WirelessTypes.WirelessSampleRate ret = (WirelessTypes.WirelessSampleRate)msclPINVOKE.WirelessNodeConfig_sampleRate__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sampleRate(WirelessTypes.WirelessSampleRate rate) {
    msclPINVOKE.WirelessNodeConfig_sampleRate__SWIG_1(swigCPtr, (int)rate);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChannelMask activeChannels() {
    ChannelMask ret = new ChannelMask(msclPINVOKE.WirelessNodeConfig_activeChannels__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void activeChannels(ChannelMask channels) {
    msclPINVOKE.WirelessNodeConfig_activeChannels__SWIG_1(swigCPtr, ChannelMask.getCPtr(channels));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint numSweeps() {
    uint ret = msclPINVOKE.WirelessNodeConfig_numSweeps__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void numSweeps(uint sweeps) {
    msclPINVOKE.WirelessNodeConfig_numSweeps__SWIG_1(swigCPtr, sweeps);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool unlimitedDuration() {
    bool ret = msclPINVOKE.WirelessNodeConfig_unlimitedDuration__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unlimitedDuration(bool enable) {
    msclPINVOKE.WirelessNodeConfig_unlimitedDuration__SWIG_1(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.DataFormat dataFormat() {
    WirelessTypes.DataFormat ret = (WirelessTypes.DataFormat)msclPINVOKE.WirelessNodeConfig_dataFormat__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dataFormat(WirelessTypes.DataFormat format) {
    msclPINVOKE.WirelessNodeConfig_dataFormat__SWIG_1(swigCPtr, (int)format);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.DataCollectionMethod dataCollectionMethod() {
    WirelessTypes.DataCollectionMethod ret = (WirelessTypes.DataCollectionMethod)msclPINVOKE.WirelessNodeConfig_dataCollectionMethod__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dataCollectionMethod(WirelessTypes.DataCollectionMethod method) {
    msclPINVOKE.WirelessNodeConfig_dataCollectionMethod__SWIG_1(swigCPtr, (int)method);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public TimeSpan timeBetweenBursts() {
    TimeSpan ret = new TimeSpan(msclPINVOKE.WirelessNodeConfig_timeBetweenBursts__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void timeBetweenBursts(TimeSpan time) {
    msclPINVOKE.WirelessNodeConfig_timeBetweenBursts__SWIG_1(swigCPtr, TimeSpan.getCPtr(time));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort lostBeaconTimeout() {
    ushort ret = msclPINVOKE.WirelessNodeConfig_lostBeaconTimeout__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void lostBeaconTimeout(ushort minutes) {
    msclPINVOKE.WirelessNodeConfig_lostBeaconTimeout__SWIG_1(swigCPtr, minutes);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool pullUpResistor(ChannelMask mask) {
    bool ret = msclPINVOKE.WirelessNodeConfig_pullUpResistor__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void pullUpResistor(ChannelMask mask, bool enable) {
    msclPINVOKE.WirelessNodeConfig_pullUpResistor__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.InputRange inputRange(ChannelMask mask) {
    WirelessTypes.InputRange ret = (WirelessTypes.InputRange)msclPINVOKE.WirelessNodeConfig_inputRange__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void inputRange(ChannelMask mask, WirelessTypes.InputRange range) {
    msclPINVOKE.WirelessNodeConfig_inputRange__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)range);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort hardwareOffset(ChannelMask mask) {
    ushort ret = msclPINVOKE.WirelessNodeConfig_hardwareOffset__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void hardwareOffset(ChannelMask mask, ushort offset) {
    msclPINVOKE.WirelessNodeConfig_hardwareOffset__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), offset);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.Filter antiAliasingFilter(ChannelMask mask) {
    WirelessTypes.Filter ret = (WirelessTypes.Filter)msclPINVOKE.WirelessNodeConfig_antiAliasingFilter__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void antiAliasingFilter(ChannelMask mask, WirelessTypes.Filter filter) {
    msclPINVOKE.WirelessNodeConfig_antiAliasingFilter__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)filter);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.Filter lowPassFilter(ChannelMask mask) {
    WirelessTypes.Filter ret = (WirelessTypes.Filter)msclPINVOKE.WirelessNodeConfig_lowPassFilter__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void lowPassFilter(ChannelMask mask, WirelessTypes.Filter filter) {
    msclPINVOKE.WirelessNodeConfig_lowPassFilter__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)filter);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.HighPassFilter highPassFilter(ChannelMask mask) {
    WirelessTypes.HighPassFilter ret = (WirelessTypes.HighPassFilter)msclPINVOKE.WirelessNodeConfig_highPassFilter__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void highPassFilter(ChannelMask mask, WirelessTypes.HighPassFilter filter) {
    msclPINVOKE.WirelessNodeConfig_highPassFilter__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)filter);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float gaugeFactor(ChannelMask mask) {
    float ret = msclPINVOKE.WirelessNodeConfig_gaugeFactor__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gaugeFactor(ChannelMask mask, float factor) {
    msclPINVOKE.WirelessNodeConfig_gaugeFactor__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), factor);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort gaugeResistance() {
    ushort ret = msclPINVOKE.WirelessNodeConfig_gaugeResistance__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void gaugeResistance(ushort resistance) {
    msclPINVOKE.WirelessNodeConfig_gaugeResistance__SWIG_1(swigCPtr, resistance);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.Voltage excitationVoltage() {
    WirelessTypes.Voltage ret = (WirelessTypes.Voltage)msclPINVOKE.WirelessNodeConfig_excitationVoltage__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void excitationVoltage(WirelessTypes.Voltage voltage) {
    msclPINVOKE.WirelessNodeConfig_excitationVoltage__SWIG_1(swigCPtr, (int)voltage);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort numActiveGauges() {
    ushort ret = msclPINVOKE.WirelessNodeConfig_numActiveGauges__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void numActiveGauges(ushort numGauges) {
    msclPINVOKE.WirelessNodeConfig_numActiveGauges__SWIG_1(swigCPtr, numGauges);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float lowBatteryThreshold() {
    float ret = msclPINVOKE.WirelessNodeConfig_lowBatteryThreshold__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void lowBatteryThreshold(float voltage) {
    msclPINVOKE.WirelessNodeConfig_lowBatteryThreshold__SWIG_1(swigCPtr, voltage);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearEquation linearEquation(ChannelMask mask) {
    LinearEquation ret = new LinearEquation(msclPINVOKE.WirelessNodeConfig_linearEquation__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask)), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void linearEquation(ChannelMask mask, LinearEquation linearEquation) {
    msclPINVOKE.WirelessNodeConfig_linearEquation__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), LinearEquation.getCPtr(linearEquation));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.CalCoef_Unit unit(ChannelMask mask) {
    WirelessTypes.CalCoef_Unit ret = (WirelessTypes.CalCoef_Unit)msclPINVOKE.WirelessNodeConfig_unit__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unit(ChannelMask mask, WirelessTypes.CalCoef_Unit unit) {
    msclPINVOKE.WirelessNodeConfig_unit__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)unit);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.CalCoef_EquationType equationType(ChannelMask mask) {
    WirelessTypes.CalCoef_EquationType ret = (WirelessTypes.CalCoef_EquationType)msclPINVOKE.WirelessNodeConfig_equationType__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void equationType(ChannelMask mask, WirelessTypes.CalCoef_EquationType equation) {
    msclPINVOKE.WirelessNodeConfig_equationType__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)equation);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.SettlingTime filterSettlingTime(ChannelMask mask) {
    WirelessTypes.SettlingTime ret = (WirelessTypes.SettlingTime)msclPINVOKE.WirelessNodeConfig_filterSettlingTime__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void filterSettlingTime(ChannelMask mask, WirelessTypes.SettlingTime settlingTime) {
    msclPINVOKE.WirelessNodeConfig_filterSettlingTime__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)settlingTime);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.ThermocoupleType thermocoupleType(ChannelMask mask) {
    WirelessTypes.ThermocoupleType ret = (WirelessTypes.ThermocoupleType)msclPINVOKE.WirelessNodeConfig_thermocoupleType__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void thermocoupleType(ChannelMask mask, WirelessTypes.ThermocoupleType type) {
    msclPINVOKE.WirelessNodeConfig_thermocoupleType__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), (int)type);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public TempSensorOptions tempSensorOptions(ChannelMask mask) {
    TempSensorOptions ret = new TempSensorOptions(msclPINVOKE.WirelessNodeConfig_tempSensorOptions__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void tempSensorOptions(ChannelMask mask, TempSensorOptions options) {
    msclPINVOKE.WirelessNodeConfig_tempSensorOptions__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), TempSensorOptions.getCPtr(options));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort debounceFilter(ChannelMask mask) {
    ushort ret = msclPINVOKE.WirelessNodeConfig_debounceFilter__SWIG_0(swigCPtr, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void debounceFilter(ChannelMask mask, ushort milliseconds) {
    msclPINVOKE.WirelessNodeConfig_debounceFilter__SWIG_1(swigCPtr, ChannelMask.getCPtr(mask), milliseconds);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public FatigueOptions fatigueOptions() {
    FatigueOptions ret = new FatigueOptions(msclPINVOKE.WirelessNodeConfig_fatigueOptions__SWIG_0(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fatigueOptions(FatigueOptions fatigueOpts) {
    msclPINVOKE.WirelessNodeConfig_fatigueOptions__SWIG_1(swigCPtr, FatigueOptions.getCPtr(fatigueOpts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public HistogramOptions histogramOptions() {
    HistogramOptions ret = new HistogramOptions(msclPINVOKE.WirelessNodeConfig_histogramOptions__SWIG_0(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void histogramOptions(HistogramOptions histogramOpts) {
    msclPINVOKE.WirelessNodeConfig_histogramOptions__SWIG_1(swigCPtr, HistogramOptions.getCPtr(histogramOpts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ActivitySense activitySense() {
    ActivitySense ret = new ActivitySense(msclPINVOKE.WirelessNodeConfig_activitySense__SWIG_0(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void activitySense(ActivitySense activitySenseOpts) {
    msclPINVOKE.WirelessNodeConfig_activitySense__SWIG_1(swigCPtr, ActivitySense.getCPtr(activitySenseOpts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EventTriggerOptions eventTriggerOptions() {
    EventTriggerOptions ret = new EventTriggerOptions(msclPINVOKE.WirelessNodeConfig_eventTriggerOptions__SWIG_0(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void eventTriggerOptions(EventTriggerOptions eventTriggerOpts) {
    msclPINVOKE.WirelessNodeConfig_eventTriggerOptions__SWIG_1(swigCPtr, EventTriggerOptions.getCPtr(eventTriggerOpts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort diagnosticInterval() {
    ushort ret = msclPINVOKE.WirelessNodeConfig_diagnosticInterval__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void diagnosticInterval(ushort interval) {
    msclPINVOKE.WirelessNodeConfig_diagnosticInterval__SWIG_1(swigCPtr, interval);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.StorageLimitMode storageLimitMode() {
    WirelessTypes.StorageLimitMode ret = (WirelessTypes.StorageLimitMode)msclPINVOKE.WirelessNodeConfig_storageLimitMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void storageLimitMode(WirelessTypes.StorageLimitMode mode) {
    msclPINVOKE.WirelessNodeConfig_storageLimitMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint sensorDelay() {
    uint ret = msclPINVOKE.WirelessNodeConfig_sensorDelay__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sensorDelay(uint delay) {
    msclPINVOKE.WirelessNodeConfig_sensorDelay__SWIG_1(swigCPtr, delay);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.DataMode dataMode() {
    WirelessTypes.DataMode ret = (WirelessTypes.DataMode)msclPINVOKE.WirelessNodeConfig_dataMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void dataMode(WirelessTypes.DataMode mode) {
    msclPINVOKE.WirelessNodeConfig_dataMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.WirelessSampleRate derivedDataRate() {
    WirelessTypes.WirelessSampleRate ret = (WirelessTypes.WirelessSampleRate)msclPINVOKE.WirelessNodeConfig_derivedDataRate__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void derivedDataRate(WirelessTypes.WirelessSampleRate rate) {
    msclPINVOKE.WirelessNodeConfig_derivedDataRate__SWIG_1(swigCPtr, (int)rate);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChannelMask derivedChannelMask(WirelessTypes.DerivedCategory category) {
    ChannelMask ret = new ChannelMask(msclPINVOKE.WirelessNodeConfig_derivedChannelMask__SWIG_0(swigCPtr, (int)category), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void derivedChannelMask(WirelessTypes.DerivedCategory category, ChannelMask mask) {
    msclPINVOKE.WirelessNodeConfig_derivedChannelMask__SWIG_1(swigCPtr, (int)category, ChannelMask.getCPtr(mask));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.DerivedVelocityUnit derivedVelocityUnit() {
    WirelessTypes.DerivedVelocityUnit ret = (WirelessTypes.DerivedVelocityUnit)msclPINVOKE.WirelessNodeConfig_derivedVelocityUnit__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void derivedVelocityUnit(WirelessTypes.DerivedVelocityUnit unit) {
    msclPINVOKE.WirelessNodeConfig_derivedVelocityUnit__SWIG_1(swigCPtr, (int)unit);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.CommProtocol communicationProtocol() {
    WirelessTypes.CommProtocol ret = (WirelessTypes.CommProtocol)msclPINVOKE.WirelessNodeConfig_communicationProtocol__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void communicationProtocol(WirelessTypes.CommProtocol commProtocol) {
    msclPINVOKE.WirelessNodeConfig_communicationProtocol__SWIG_1(swigCPtr, (int)commProtocol);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.SensorOutputMode sensorOutputMode() {
    WirelessTypes.SensorOutputMode ret = (WirelessTypes.SensorOutputMode)msclPINVOKE.WirelessNodeConfig_sensorOutputMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sensorOutputMode(WirelessTypes.SensorOutputMode mode) {
    msclPINVOKE.WirelessNodeConfig_sensorOutputMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float flashBandwidth(WirelessTypes.WirelessSampleRate rawSampleRate, WirelessTypes.DataFormat dataFormat, byte numRawChannels, uint derivedBytesPerSweep, WirelessTypes.WirelessSampleRate derivedRate) {
    float ret = msclPINVOKE.WirelessNodeConfig_flashBandwidth((int)rawSampleRate, (int)dataFormat, numRawChannels, derivedBytesPerSweep, (int)derivedRate);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float flashBandwidth_burst(WirelessTypes.WirelessSampleRate rawSampleRate, WirelessTypes.DataFormat dataFormat, byte numRawChannels, uint derivedBytesPerSweep, uint numSweeps, TimeSpan timeBetweenBursts) {
    float ret = msclPINVOKE.WirelessNodeConfig_flashBandwidth_burst((int)rawSampleRate, (int)dataFormat, numRawChannels, derivedBytesPerSweep, numSweeps, TimeSpan.getCPtr(timeBetweenBursts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly uint SENSOR_DELAY_ALWAYS_ON = msclPINVOKE.WirelessNodeConfig_SENSOR_DELAY_ALWAYS_ON_get();
}

}
