//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EventTriggerCombinationParameter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventTriggerCombinationParameter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventTriggerCombinationParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventTriggerCombinationParameter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EventTriggerCombinationParameter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort combination {
    set {
      msclPINVOKE.EventTriggerCombinationParameter_combination_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.EventTriggerCombinationParameter_combination_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_char inputTriggers {
    set {
      msclPINVOKE.EventTriggerCombinationParameter_inputTriggers_set(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.EventTriggerCombinationParameter_inputTriggers_get(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EventTriggerCombinationParameter() : this(msclPINVOKE.new_EventTriggerCombinationParameter(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Combination {
    LOGIC_NEVER = 0x0000,
    LOGIC_ALWAYS = 0xFFFF,
    LOGIC_NONE = 0x0001,
    LOGIC_OR = 0xFFFE,
    LOGIC_NAND = 0x7FFF,
    LOGIC_XOR_ONE = 0x0116,
    LOGIC_ONLY_A = 0x0002,
    LOGIC_ONLY_B = 0x0004,
    LOGIC_ONLY_C = 0x0010,
    LOGIC_ONLY_D = 0x0100,
    LOGIC_AND_AB = 0x8888,
    LOGIC_AB_OR_C = 0xF8F8,
    LOGIC_AND = 0x8000
  }

}

}
