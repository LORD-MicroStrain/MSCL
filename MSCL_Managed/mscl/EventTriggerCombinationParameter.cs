//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class EventTriggerCombinationParameter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventTriggerCombinationParameter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventTriggerCombinationParameter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventTriggerCombinationParameter() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_EventTriggerCombinationParameter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort logicTable {
    set {
      msclPINVOKE.EventTriggerCombinationParameter_logicTable_set(swigCPtr, value);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ushort ret = msclPINVOKE.EventTriggerCombinationParameter_logicTable_get(swigCPtr);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EventInputTriggers inputTriggers {
    set {
      msclPINVOKE.EventTriggerCombinationParameter_inputTriggers_set(swigCPtr, EventInputTriggers.getCPtr(value));
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = msclPINVOKE.EventTriggerCombinationParameter_inputTriggers_get(swigCPtr);
      EventInputTriggers ret = (cPtr == global::System.IntPtr.Zero) ? null : new EventInputTriggers(cPtr, false);
      if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EventTriggerCombinationParameter() : this(msclPINVOKE.new_EventTriggerCombinationParameter(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly byte MAX_INPUT_TRIGGERS = msclPINVOKE.EventTriggerCombinationParameter_MAX_INPUT_TRIGGERS_get();
  public static readonly ushort LOGIC_NEVER = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_NEVER_get();
  public static readonly ushort LOGIC_ALWAYS = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_ALWAYS_get();
  public static readonly ushort LOGIC_NONE = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_NONE_get();
  public static readonly ushort LOGIC_OR = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_OR_get();
  public static readonly ushort LOGIC_NAND = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_NAND_get();
  public static readonly ushort LOGIC_XOR_ONE = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_XOR_ONE_get();
  public static readonly ushort LOGIC_ONLY_A = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_ONLY_A_get();
  public static readonly ushort LOGIC_ONLY_B = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_ONLY_B_get();
  public static readonly ushort LOGIC_ONLY_C = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_ONLY_C_get();
  public static readonly ushort LOGIC_ONLY_D = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_ONLY_D_get();
  public static readonly ushort LOGIC_AND_AB = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_AND_AB_get();
  public static readonly ushort LOGIC_AB_OR_C = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_AB_OR_C_get();
  public static readonly ushort LOGIC_AND = msclPINVOKE.EventTriggerCombinationParameter_LOGIC_AND_get();
}

}
