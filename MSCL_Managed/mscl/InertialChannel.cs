//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class InertialChannel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InertialChannel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InertialChannel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~InertialChannel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_InertialChannel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public InertialChannel(InertialTypes.ChannelField channelField, SampleRate sampleRate) : this(msclPINVOKE.new_InertialChannel__SWIG_0((int)channelField, SampleRate.getCPtr(sampleRate)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialChannel() : this(msclPINVOKE.new_InertialChannel__SWIG_1(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.ChannelField channelField() {
    InertialTypes.ChannelField ret = (InertialTypes.ChannelField)msclPINVOKE.InertialChannel_channelField(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SampleRate sampleRate() {
    SampleRate ret = new SampleRate(msclPINVOKE.InertialChannel_sampleRate(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort rateDecimation(ushort sampleRateBase) {
    ushort ret = msclPINVOKE.InertialChannel_rateDecimation(swigCPtr, sampleRateBase);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SampleRate validateSampleRate(ushort sampleRateBase) {
    SampleRate ret = new SampleRate(msclPINVOKE.InertialChannel_validateSampleRate__SWIG_0(swigCPtr, sampleRateBase), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SampleRate validateSampleRate(InertialNode node) {
    SampleRate ret = new SampleRate(msclPINVOKE.InertialChannel_validateSampleRate__SWIG_1(swigCPtr, InertialNode.getCPtr(node)), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
