//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class InertialNode : MipNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal InertialNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.InertialNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InertialNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_InertialNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public InertialNode(Connection connection) : this(msclPINVOKE.new_InertialNode(Connection.getCPtr(connection)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public MipDataPackets getDataPackets(uint timeout, uint maxPackets) {
    MipDataPackets ret = new MipDataPackets(msclPINVOKE.InertialNode_getDataPackets__SWIG_0(swigCPtr, timeout, maxPackets), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipDataPackets getDataPackets(uint timeout) {
    MipDataPackets ret = new MipDataPackets(msclPINVOKE.InertialNode_getDataPackets__SWIG_1(swigCPtr, timeout), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipDataPackets getDataPackets() {
    MipDataPackets ret = new MipDataPackets(msclPINVOKE.InertialNode_getDataPackets__SWIG_2(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint totalPackets() {
    uint ret = msclPINVOKE.InertialNode_totalPackets(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NmeaPackets getNmeaPackets(uint timeout, uint maxPackets) {
    NmeaPackets ret = new NmeaPackets(msclPINVOKE.InertialNode_getNmeaPackets__SWIG_0(swigCPtr, timeout, maxPackets), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NmeaPackets getNmeaPackets(uint timeout) {
    NmeaPackets ret = new NmeaPackets(msclPINVOKE.InertialNode_getNmeaPackets__SWIG_1(swigCPtr, timeout), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NmeaPackets getNmeaPackets() {
    NmeaPackets ret = new NmeaPackets(msclPINVOKE.InertialNode_getNmeaPackets__SWIG_2(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableNmeaParsing(bool enable) {
    msclPINVOKE.InertialNode_enableNmeaParsing__SWIG_0(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableNmeaParsing() {
    msclPINVOKE.InertialNode_enableNmeaParsing__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pollData(MipTypes.DataClass dataClass, MipChannelFields fields) {
    msclPINVOKE.InertialNode_pollData__SWIG_0(swigCPtr, (int)dataClass, MipChannelFields.getCPtr(fields));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pollData(MipTypes.DataClass dataClass) {
    msclPINVOKE.InertialNode_pollData__SWIG_1(swigCPtr, (int)dataClass);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getDataRateBase(MipTypes.DataClass dataClass) {
    ushort ret = msclPINVOKE.InertialNode_getDataRateBase(swigCPtr, (int)dataClass);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipChannels getActiveChannelFields(MipTypes.DataClass dataClass) {
    MipChannels ret = new MipChannels(msclPINVOKE.InertialNode_getActiveChannelFields(swigCPtr, (int)dataClass), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setActiveChannelFields(MipTypes.DataClass dataClass, MipChannels channels) {
    msclPINVOKE.InertialNode_setActiveChannelFields(swigCPtr, (int)dataClass, MipChannels.getCPtr(channels));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveActiveChannelFields(MipTypes.DataClass dataClass) {
    msclPINVOKE.InertialNode_saveActiveChannelFields(swigCPtr, (int)dataClass);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setFactoryStreamingChannels(InertialTypes.FactoryStreamingOption option) {
    msclPINVOKE.InertialNode_setFactoryStreamingChannels(swigCPtr, (int)option);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public override byte getCommunicationMode() {
    byte ret = msclPINVOKE.InertialNode_getCommunicationMode(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setCommunicationMode(byte communicationMode) {
    msclPINVOKE.InertialNode_setCommunicationMode(swigCPtr, communicationMode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isDataStreamEnabled(MipTypes.DataClass dataClass) {
    bool ret = msclPINVOKE.InertialNode_isDataStreamEnabled(swigCPtr, (int)dataClass);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableDataStream(MipTypes.DataClass dataClass, bool enable, bool resumeStreaming) {
    msclPINVOKE.InertialNode_enableDataStream__SWIG_0(swigCPtr, (int)dataClass, enable, resumeStreaming);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableDataStream(MipTypes.DataClass dataClass, bool enable) {
    msclPINVOKE.InertialNode_enableDataStream__SWIG_1(swigCPtr, (int)dataClass, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableDataStream(MipTypes.DataClass dataClass) {
    msclPINVOKE.InertialNode_enableDataStream__SWIG_2(swigCPtr, (int)dataClass);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetFilter() {
    msclPINVOKE.InertialNode_resetFilter(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void runFilter() {
    msclPINVOKE.InertialNode_runFilter(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAutoInitialization() {
    bool ret = msclPINVOKE.InertialNode_getAutoInitialization(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAutoInitialization(bool enable) {
    msclPINVOKE.InertialNode_setAutoInitialization(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAltitudeAid() {
    bool ret = msclPINVOKE.InertialNode_getAltitudeAid(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAltitudeAid(bool enable) {
    msclPINVOKE.InertialNode_setAltitudeAid(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getPitchRollAid() {
    bool ret = msclPINVOKE.InertialNode_getPitchRollAid(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPitchRollAid(bool enable) {
    msclPINVOKE.InertialNode_setPitchRollAid(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableVerticalGyroConstraint(bool enable) {
    msclPINVOKE.InertialNode_enableVerticalGyroConstraint(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool verticalGyroConstraintEnabled() {
    bool ret = msclPINVOKE.InertialNode_verticalGyroConstraintEnabled(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableWheeledVehicleConstraint(bool enable) {
    msclPINVOKE.InertialNode_enableWheeledVehicleConstraint(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool wheeledVehicleConstraintEnabled() {
    bool ret = msclPINVOKE.InertialNode_wheeledVehicleConstraintEnabled(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setVelocityZUPT(ZUPTSettingsData ZUPTSettings) {
    msclPINVOKE.InertialNode_setVelocityZUPT(swigCPtr, ZUPTSettingsData.getCPtr(ZUPTSettings));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ZUPTSettingsData getVelocityZUPT() {
    ZUPTSettingsData ret = new ZUPTSettingsData(msclPINVOKE.InertialNode_getVelocityZUPT(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAngularRateZUPT(ZUPTSettingsData ZUPTSettings) {
    msclPINVOKE.InertialNode_setAngularRateZUPT(swigCPtr, ZUPTSettingsData.getCPtr(ZUPTSettings));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ZUPTSettingsData getAngularRateZUPT() {
    ZUPTSettingsData ret = new ZUPTSettingsData(msclPINVOKE.InertialNode_getAngularRateZUPT(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cmdedVelZUPT() {
    msclPINVOKE.InertialNode_cmdedVelZUPT(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cmdedAngRateZUPT() {
    msclPINVOKE.InertialNode_cmdedAngRateZUPT(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInitialAttitude(EulerAngles attitude) {
    msclPINVOKE.InertialNode_setInitialAttitude(swigCPtr, EulerAngles.getCPtr(attitude));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setInitialHeading(float heading) {
    msclPINVOKE.InertialNode_setInitialHeading(swigCPtr, heading);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public FilterInitializationValues getInitialFilterConfiguration() {
    FilterInitializationValues ret = new FilterInitializationValues(msclPINVOKE.InertialNode_getInitialFilterConfiguration(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInitialFilterConfiguration(FilterInitializationValues filterConfig) {
    msclPINVOKE.InertialNode_setInitialFilterConfiguration(swigCPtr, FilterInitializationValues.getCPtr(filterConfig));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EulerAngles getSensorToVehicleRotation_eulerAngles() {
    EulerAngles ret = new EulerAngles(msclPINVOKE.InertialNode_getSensorToVehicleRotation_eulerAngles(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleRotation_eulerAngles(EulerAngles angles) {
    msclPINVOKE.InertialNode_setSensorToVehicleRotation_eulerAngles(swigCPtr, EulerAngles.getCPtr(angles));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix_3x3 getSensorToVehicleRotation_matrix() {
    Matrix_3x3 ret = new Matrix_3x3(msclPINVOKE.InertialNode_getSensorToVehicleRotation_matrix(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleRotation_matrix(Matrix_3x3 dcm) {
    msclPINVOKE.InertialNode_setSensorToVehicleRotation_matrix(swigCPtr, Matrix_3x3.getCPtr(dcm));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion getSensorToVehicleRotation_quaternion() {
    Quaternion ret = new Quaternion(msclPINVOKE.InertialNode_getSensorToVehicleRotation_quaternion(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleRotation_quaternion(Quaternion rotation) {
    msclPINVOKE.InertialNode_setSensorToVehicleRotation_quaternion(swigCPtr, Quaternion.getCPtr(rotation));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EulerAngles getSensorToVehicleTransform_eulerAngles() {
    EulerAngles ret = new EulerAngles(msclPINVOKE.InertialNode_getSensorToVehicleTransform_eulerAngles(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleTransform_eulerAngles(EulerAngles angles) {
    msclPINVOKE.InertialNode_setSensorToVehicleTransform_eulerAngles(swigCPtr, EulerAngles.getCPtr(angles));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix_3x3 getSensorToVehicleTransform_matrix() {
    Matrix_3x3 ret = new Matrix_3x3(msclPINVOKE.InertialNode_getSensorToVehicleTransform_matrix(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleTransform_matrix(Matrix_3x3 dcm) {
    msclPINVOKE.InertialNode_setSensorToVehicleTransform_matrix(swigCPtr, Matrix_3x3.getCPtr(dcm));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion getSensorToVehicleTransform_quaternion() {
    Quaternion ret = new Quaternion(msclPINVOKE.InertialNode_getSensorToVehicleTransform_quaternion(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleTransform_quaternion(Quaternion transformation) {
    msclPINVOKE.InertialNode_setSensorToVehicleTransform_quaternion(swigCPtr, Quaternion.getCPtr(transformation));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset getSensorToVehicleOffset() {
    PositionOffset ret = new PositionOffset(msclPINVOKE.InertialNode_getSensorToVehicleOffset(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorToVehicleOffset(PositionOffset offset) {
    msclPINVOKE.InertialNode_setSensorToVehicleOffset(swigCPtr, PositionOffset.getCPtr(offset));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset getAntennaOffset() {
    PositionOffset ret = new PositionOffset(msclPINVOKE.InertialNode_getAntennaOffset(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAntennaOffset(PositionOffset offset) {
    msclPINVOKE.InertialNode_setAntennaOffset(swigCPtr, PositionOffset.getCPtr(offset));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getGNSSAssistedFixControl() {
    bool ret = msclPINVOKE.InertialNode_getGNSSAssistedFixControl(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGNSSAssistedFixControl(bool enableAssistedFix) {
    msclPINVOKE.InertialNode_setGNSSAssistedFixControl(swigCPtr, enableAssistedFix);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public TimeUpdate getGNSSAssistTimeUpdate() {
    TimeUpdate ret = new TimeUpdate(msclPINVOKE.InertialNode_getGNSSAssistTimeUpdate(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGNSSAssistTimeUpdate(TimeUpdate timeUpdate) {
    msclPINVOKE.InertialNode_setGNSSAssistTimeUpdate(swigCPtr, TimeUpdate.getCPtr(timeUpdate));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getGPSTimeUpdate(MipTypes.TimeFrame timeFrame) {
    uint ret = msclPINVOKE.InertialNode_getGPSTimeUpdate(swigCPtr, (int)timeFrame);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGPSTimeUpdate(MipTypes.TimeFrame arg0, uint timeData) {
    msclPINVOKE.InertialNode_setGPSTimeUpdate(swigCPtr, (int)arg0, timeData);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setConstellationSettings(ConstellationSettingsData dataToUse) {
    msclPINVOKE.InertialNode_setConstellationSettings(swigCPtr, ConstellationSettingsData.getCPtr(dataToUse));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConstellationSettingsData getConstellationSettings() {
    ConstellationSettingsData ret = new ConstellationSettingsData(msclPINVOKE.InertialNode_getConstellationSettings(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSBASSettings(SBASSettingsData dataToUse) {
    msclPINVOKE.InertialNode_setSBASSettings(swigCPtr, SBASSettingsData.getCPtr(dataToUse));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SBASSettingsData getSBASSettings() {
    SBASSettingsData ret = new SBASSettingsData(msclPINVOKE.InertialNode_getSBASSettings(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAccelerometerBias(GeometricVector biasVector) {
    msclPINVOKE.InertialNode_setAccelerometerBias(swigCPtr, GeometricVector.getCPtr(biasVector));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getAccelerometerBias() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getAccelerometerBias(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGyroBias(GeometricVector biasVector) {
    msclPINVOKE.InertialNode_setGyroBias(swigCPtr, GeometricVector.getCPtr(biasVector));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getGyroBias() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getGyroBias(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeometricVector captureGyroBias(ushort samplingTime) {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_captureGyroBias(swigCPtr, samplingTime), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void findMagnetometerCaptureAutoCalibration() {
    msclPINVOKE.InertialNode_findMagnetometerCaptureAutoCalibration(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveMagnetometerCaptureAutoCalibration() {
    msclPINVOKE.InertialNode_saveMagnetometerCaptureAutoCalibration(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMagnetometerSoftIronMatrix(Matrix_3x3 matrix) {
    msclPINVOKE.InertialNode_setMagnetometerSoftIronMatrix(swigCPtr, Matrix_3x3.getCPtr(matrix));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix_3x3 getMagnetometerSoftIronMatrix() {
    Matrix_3x3 ret = new Matrix_3x3(msclPINVOKE.InertialNode_getMagnetometerSoftIronMatrix(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMagnetometerHardIronOffset(GeometricVector offsetVector) {
    msclPINVOKE.InertialNode_setMagnetometerHardIronOffset(swigCPtr, GeometricVector.getCPtr(offsetVector));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getMagnetometerHardIronOffset() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getMagnetometerHardIronOffset(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setConingAndScullingEnable(bool enable) {
    msclPINVOKE.InertialNode_setConingAndScullingEnable(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getConingAndScullingEnable() {
    bool ret = msclPINVOKE.InertialNode_getConingAndScullingEnable(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLowPassFilterSettings(LowPassFilterConfig data) {
    msclPINVOKE.InertialNode_setLowPassFilterSettings(swigCPtr, LowPassFilterConfig.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public LowPassFilterConfig getLowPassFilterSettings(MipChannelFields dataDescriptors) {
    LowPassFilterConfig ret = new LowPassFilterConfig(msclPINVOKE.InertialNode_getLowPassFilterSettings(swigCPtr, MipChannelFields.getCPtr(dataDescriptors)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setComplementaryFilterSettings(ComplementaryFilterData data) {
    msclPINVOKE.InertialNode_setComplementaryFilterSettings(swigCPtr, ComplementaryFilterData.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ComplementaryFilterData getComplementaryFilterSettings() {
    ComplementaryFilterData ret = new ComplementaryFilterData(msclPINVOKE.InertialNode_getComplementaryFilterSettings(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeviceStatusData getBasicDeviceStatus() {
    DeviceStatusData ret = new DeviceStatusData(msclPINVOKE.InertialNode_getBasicDeviceStatus(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeviceStatusData getDiagnosticDeviceStatus() {
    DeviceStatusData ret = new DeviceStatusData(msclPINVOKE.InertialNode_getDiagnosticDeviceStatus(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sendRawRTCM_2_3Message(string theMessage) {
    msclPINVOKE.InertialNode_sendRawRTCM_2_3Message(swigCPtr, theMessage);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVehicleDynamicsMode(InertialTypes.VehicleModeType mode) {
    msclPINVOKE.InertialNode_setVehicleDynamicsMode(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.VehicleModeType getVehicleDynamicsMode() {
    InertialTypes.VehicleModeType ret = (InertialTypes.VehicleModeType)msclPINVOKE.InertialNode_getVehicleDynamicsMode(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEstimationControlFlags(EstimationControlOptions flags) {
    msclPINVOKE.InertialNode_setEstimationControlFlags(swigCPtr, EstimationControlOptions.getCPtr(flags));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EstimationControlOptions getEstimationControlFlags() {
    EstimationControlOptions ret = new EstimationControlOptions(msclPINVOKE.InertialNode_getEstimationControlFlags(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setInclinationSource(GeographicSourceOptions options) {
    msclPINVOKE.InertialNode_setInclinationSource(swigCPtr, GeographicSourceOptions.getCPtr(options));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeographicSourceOptions getInclinationSource() {
    GeographicSourceOptions ret = new GeographicSourceOptions(msclPINVOKE.InertialNode_getInclinationSource(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDeclinationSource(GeographicSourceOptions options) {
    msclPINVOKE.InertialNode_setDeclinationSource(swigCPtr, GeographicSourceOptions.getCPtr(options));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeographicSourceOptions getDeclinationSource() {
    GeographicSourceOptions ret = new GeographicSourceOptions(msclPINVOKE.InertialNode_getDeclinationSource(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMagneticFieldMagnitudeSource(GeographicSourceOptions options) {
    msclPINVOKE.InertialNode_setMagneticFieldMagnitudeSource(swigCPtr, GeographicSourceOptions.getCPtr(options));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeographicSourceOptions getMagneticFieldMagnitudeSource() {
    GeographicSourceOptions ret = new GeographicSourceOptions(msclPINVOKE.InertialNode_getMagneticFieldMagnitudeSource(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGNSS_SourceControl(InertialTypes.GNSS_Source gnssSource) {
    msclPINVOKE.InertialNode_setGNSS_SourceControl(swigCPtr, (int)gnssSource);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.GNSS_Source getGNSS_SourceControl() {
    InertialTypes.GNSS_Source ret = (InertialTypes.GNSS_Source)msclPINVOKE.InertialNode_getGNSS_SourceControl(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sendExternalGNSSUpdate(ExternalGNSSUpdateData gnssUpdateData) {
    msclPINVOKE.InertialNode_sendExternalGNSSUpdate(swigCPtr, ExternalGNSSUpdateData.getCPtr(gnssUpdateData));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHeadingUpdateControl(HeadingUpdateOptions headingUpdateOptions) {
    msclPINVOKE.InertialNode_setHeadingUpdateControl(swigCPtr, HeadingUpdateOptions.getCPtr(headingUpdateOptions));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void tareOrientation(TareAxisValues axisValue) {
    msclPINVOKE.InertialNode_tareOrientation(swigCPtr, TareAxisValues.getCPtr(axisValue));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public HeadingUpdateOptions getHeadingUpdateControl() {
    HeadingUpdateOptions ret = new HeadingUpdateOptions(msclPINVOKE.InertialNode_getHeadingUpdateControl(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGravityErrorAdaptiveMeasurement(AdaptiveMeasurementData data) {
    msclPINVOKE.InertialNode_setGravityErrorAdaptiveMeasurement(swigCPtr, AdaptiveMeasurementData.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AdaptiveMeasurementData getGravityErrorAdaptiveMeasurement() {
    AdaptiveMeasurementData ret = new AdaptiveMeasurementData(msclPINVOKE.InertialNode_getGravityErrorAdaptiveMeasurement(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMagnetometerErrorAdaptiveMeasurement(AdaptiveMeasurementData data) {
    msclPINVOKE.InertialNode_setMagnetometerErrorAdaptiveMeasurement(swigCPtr, AdaptiveMeasurementData.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AdaptiveMeasurementData getMagnetometerErrorAdaptiveMeasurement() {
    AdaptiveMeasurementData ret = new AdaptiveMeasurementData(msclPINVOKE.InertialNode_getMagnetometerErrorAdaptiveMeasurement(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMagDipAngleErrorAdaptiveMeasurement(AdaptiveMeasurementData data) {
    msclPINVOKE.InertialNode_setMagDipAngleErrorAdaptiveMeasurement(swigCPtr, AdaptiveMeasurementData.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AdaptiveMeasurementData getMagDipAngleErrorAdaptiveMeasurement() {
    AdaptiveMeasurementData ret = new AdaptiveMeasurementData(msclPINVOKE.InertialNode_getMagDipAngleErrorAdaptiveMeasurement(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMagNoiseStandardDeviation(GeometricVector data) {
    msclPINVOKE.InertialNode_setMagNoiseStandardDeviation(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getMagNoiseStandardDeviation() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getMagNoiseStandardDeviation(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGravNoiseStandardDeviation(GeometricVector data) {
    msclPINVOKE.InertialNode_setGravNoiseStandardDeviation(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getGravNoiseStandardDeviation() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getGravNoiseStandardDeviation(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAccelNoiseStandardDeviation(GeometricVector data) {
    msclPINVOKE.InertialNode_setAccelNoiseStandardDeviation(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getAccelNoiseStandardDeviation() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getAccelNoiseStandardDeviation(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGyroNoiseStandardDeviation(GeometricVector data) {
    msclPINVOKE.InertialNode_setGyroNoiseStandardDeviation(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getGyroNoiseStandardDeviation() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getGyroNoiseStandardDeviation(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPressureAltNoiseStandardDeviation(float data) {
    msclPINVOKE.InertialNode_setPressureAltNoiseStandardDeviation(swigCPtr, data);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getPressureAltNoiseStandardDeviation() {
    float ret = msclPINVOKE.InertialNode_getPressureAltNoiseStandardDeviation(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setHardIronOffsetProcessNoise(GeometricVector data) {
    msclPINVOKE.InertialNode_setHardIronOffsetProcessNoise(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getHardIronOffsetProcessNoise() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getHardIronOffsetProcessNoise(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAccelBiasModelParams(GeometricVectors data) {
    msclPINVOKE.InertialNode_setAccelBiasModelParams(swigCPtr, GeometricVectors.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVectors getAccelBiasModelParams() {
    GeometricVectors ret = new GeometricVectors(msclPINVOKE.InertialNode_getAccelBiasModelParams(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGyroBiasModelParams(GeometricVectors data) {
    msclPINVOKE.InertialNode_setGyroBiasModelParams(swigCPtr, GeometricVectors.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVectors getGyroBiasModelParams() {
    GeometricVectors ret = new GeometricVectors(msclPINVOKE.InertialNode_getGyroBiasModelParams(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSoftIronMatrixProcessNoise(Matrix_3x3 data) {
    msclPINVOKE.InertialNode_setSoftIronMatrixProcessNoise(swigCPtr, Matrix_3x3.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix_3x3 getSoftIronMatrixProcessNoise() {
    Matrix_3x3 ret = new Matrix_3x3(msclPINVOKE.InertialNode_getSoftIronMatrixProcessNoise(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFixedReferencePosition(FixedReferencePositionData data) {
    msclPINVOKE.InertialNode_setFixedReferencePosition(swigCPtr, FixedReferencePositionData.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public FixedReferencePositionData getFixedReferencePosition() {
    FixedReferencePositionData ret = new FixedReferencePositionData(msclPINVOKE.InertialNode_getFixedReferencePosition(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGPSDynamicsMode(InertialTypes.GPSDynamicsMode data) {
    msclPINVOKE.InertialNode_setGPSDynamicsMode(swigCPtr, (int)data);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.GPSDynamicsMode getGPSDynamicsMode() {
    InertialTypes.GPSDynamicsMode ret = (InertialTypes.GPSDynamicsMode)msclPINVOKE.InertialNode_getGPSDynamicsMode(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDevicePowerState(InertialTypes.DeviceSelector device, InertialTypes.PowerState data) {
    msclPINVOKE.InertialNode_setDevicePowerState(swigCPtr, (int)device, (int)data);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.PowerState getDevicePowerState(InertialTypes.DeviceSelector device) {
    InertialTypes.PowerState ret = (InertialTypes.PowerState)msclPINVOKE.InertialNode_getDevicePowerState(swigCPtr, (int)device);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDeviceStreamFormat(InertialTypes.DeviceSelector device, InertialTypes.StreamFormat data) {
    msclPINVOKE.InertialNode_setDeviceStreamFormat(swigCPtr, (int)device, (int)data);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.StreamFormat getDeviceStreamFormat(InertialTypes.DeviceSelector device) {
    InertialTypes.StreamFormat ret = (InertialTypes.StreamFormat)msclPINVOKE.InertialNode_getDeviceStreamFormat(swigCPtr, (int)device);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSignalConditioningSettings(SignalConditioningValues data) {
    msclPINVOKE.InertialNode_setSignalConditioningSettings(swigCPtr, SignalConditioningValues.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SignalConditioningValues getSignalConditioningSettings() {
    SignalConditioningValues ret = new SignalConditioningValues(msclPINVOKE.InertialNode_getSignalConditioningSettings(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEnableDisableMeasurements(EnableDisableMeasurements data) {
    msclPINVOKE.InertialNode_setEnableDisableMeasurements(swigCPtr, EnableDisableMeasurements.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EnableDisableMeasurements getEnableDisableMeasurements() {
    EnableDisableMeasurements ret = new EnableDisableMeasurements(msclPINVOKE.InertialNode_getEnableDisableMeasurements(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGravityNoiseMinimum(GeometricVector data) {
    msclPINVOKE.InertialNode_setGravityNoiseMinimum(swigCPtr, GeometricVector.getCPtr(data));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeometricVector getGravityNoiseMinimum() {
    GeometricVector ret = new GeometricVector(msclPINVOKE.InertialNode_getGravityNoiseMinimum(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sendExternalHeadingUpdate(HeadingData headingData) {
    msclPINVOKE.InertialNode_sendExternalHeadingUpdate__SWIG_0(swigCPtr, HeadingData.getCPtr(headingData));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sendExternalHeadingUpdate(HeadingData headingData, TimeUpdate timestamp) {
    msclPINVOKE.InertialNode_sendExternalHeadingUpdate__SWIG_1(swigCPtr, HeadingData.getCPtr(headingData), TimeUpdate.getCPtr(timestamp));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool aidingMeasurementEnabled(InertialTypes.AidingMeasurementSource aidingSource) {
    bool ret = msclPINVOKE.InertialNode_aidingMeasurementEnabled(swigCPtr, (int)aidingSource);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableDisableAidingMeasurement(InertialTypes.AidingMeasurementSource aidingSource, bool enable) {
    msclPINVOKE.InertialNode_enableDisableAidingMeasurement(swigCPtr, (int)aidingSource, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AutoAdaptiveFilterOptions getAdaptiveFilterOptions() {
    AutoAdaptiveFilterOptions ret = new AutoAdaptiveFilterOptions(msclPINVOKE.InertialNode_getAdaptiveFilterOptions(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAdaptiveFilterOptions(AutoAdaptiveFilterOptions options) {
    msclPINVOKE.InertialNode_setAdaptiveFilterOptions(swigCPtr, AutoAdaptiveFilterOptions.getCPtr(options));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset getMultiAntennaOffset(byte receiverId) {
    PositionOffset ret = new PositionOffset(msclPINVOKE.InertialNode_getMultiAntennaOffset(swigCPtr, receiverId), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMultiAntennaOffset(byte receiverId, PositionOffset offset) {
    msclPINVOKE.InertialNode_setMultiAntennaOffset(swigCPtr, receiverId, PositionOffset.getCPtr(offset));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public InertialTypes.PpsSource getPpsSource() {
    InertialTypes.PpsSource ret = (InertialTypes.PpsSource)msclPINVOKE.InertialNode_getPpsSource(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPpsSource(InertialTypes.PpsSource ppsSource) {
    msclPINVOKE.InertialNode_setPpsSource(swigCPtr, (int)ppsSource);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public OdometerConfiguration getOdometerConfig() {
    OdometerConfiguration ret = new OdometerConfiguration(msclPINVOKE.InertialNode_getOdometerConfig(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOdometerConfig(OdometerConfiguration config) {
    msclPINVOKE.InertialNode_setOdometerConfig(swigCPtr, OdometerConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SensorRange getSensorRange(SensorRange.Type sensorRangeType) {
    SensorRange ret = new SensorRange(msclPINVOKE.InertialNode_getSensorRange(swigCPtr, (int)sensorRangeType), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSensorRange(SensorRange range) {
    msclPINVOKE.InertialNode_setSensorRange__SWIG_0(swigCPtr, SensorRange.getCPtr(range));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSensorRange(SensorRange.Type type, byte rangeId) {
    msclPINVOKE.InertialNode_setSensorRange__SWIG_1(swigCPtr, (int)type, rangeId);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GpioConfiguration getGpioConfig(byte pin) {
    GpioConfiguration ret = new GpioConfiguration(msclPINVOKE.InertialNode_getGpioConfig(swigCPtr, pin), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGpioConfig(GpioConfiguration config) {
    msclPINVOKE.InertialNode_setGpioConfig(swigCPtr, GpioConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getGpioState(byte pin) {
    bool ret = msclPINVOKE.InertialNode_getGpioState(swigCPtr, pin);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGpioState(byte pin, bool state) {
    msclPINVOKE.InertialNode_setGpioState(swigCPtr, pin, state);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EventControlMode getEventTriggerMode(byte instance) {
    EventControlMode ret = (EventControlMode)msclPINVOKE.InertialNode_getEventTriggerMode(swigCPtr, instance);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEventTriggerMode(byte instance, EventControlMode mode) {
    msclPINVOKE.InertialNode_setEventTriggerMode(swigCPtr, instance, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EventTriggerConfiguration getEventTriggerConfig(byte instance) {
    EventTriggerConfiguration ret = new EventTriggerConfiguration(msclPINVOKE.InertialNode_getEventTriggerConfig(swigCPtr, instance), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEventTriggerConfig(EventTriggerConfiguration config) {
    msclPINVOKE.InertialNode_setEventTriggerConfig(swigCPtr, EventTriggerConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EventActionConfiguration getEventActionConfig(byte instance) {
    EventActionConfiguration ret = new EventActionConfiguration(msclPINVOKE.InertialNode_getEventActionConfig(swigCPtr, instance), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setEventActionConfig(EventActionConfiguration config, bool validateSupported) {
    msclPINVOKE.InertialNode_setEventActionConfig__SWIG_0(swigCPtr, EventActionConfiguration.getCPtr(config), validateSupported);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEventActionConfig(EventActionConfiguration config) {
    msclPINVOKE.InertialNode_setEventActionConfig__SWIG_1(swigCPtr, EventActionConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AntennaLeverArmCalConfiguration getAntennaLeverArmCal() {
    AntennaLeverArmCalConfiguration ret = new AntennaLeverArmCalConfiguration(msclPINVOKE.InertialNode_getAntennaLeverArmCal(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAntennaLeverArmCal(AntennaLeverArmCalConfiguration config) {
    msclPINVOKE.InertialNode_setAntennaLeverArmCal(swigCPtr, AntennaLeverArmCalConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionReferenceConfiguration getRelativePositionReference() {
    PositionReferenceConfiguration ret = new PositionReferenceConfiguration(msclPINVOKE.InertialNode_getRelativePositionReference(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRelativePositionReference(PositionReferenceConfiguration ref_) {
    msclPINVOKE.InertialNode_setRelativePositionReference(swigCPtr, PositionReferenceConfiguration.getCPtr(ref_));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset getLeverArmReferenceOffset() {
    PositionOffset ret = new PositionOffset(msclPINVOKE.InertialNode_getLeverArmReferenceOffset(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setLeverArmReferenceOffset(PositionOffset offset) {
    msclPINVOKE.InertialNode_setLeverArmReferenceOffset(swigCPtr, PositionOffset.getCPtr(offset));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void sendExternalSpeedMeasurementUpdate(float tow, float speed, float unc) {
    msclPINVOKE.InertialNode_sendExternalSpeedMeasurementUpdate(swigCPtr, tow, speed, unc);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public PositionOffset getSpeedMeasurementOffset() {
    PositionOffset ret = new PositionOffset(msclPINVOKE.InertialNode_getSpeedMeasurementOffset(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSpeedMeasurementOffset(PositionOffset offset) {
    msclPINVOKE.InertialNode_setSpeedMeasurementOffset(swigCPtr, PositionOffset.getCPtr(offset));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GnssSignalConfiguration getGnssSignalConfig() {
    GnssSignalConfiguration ret = new GnssSignalConfiguration(msclPINVOKE.InertialNode_getGnssSignalConfig(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGnssSignalConfig(GnssSignalConfiguration config) {
    msclPINVOKE.InertialNode_setGnssSignalConfig(swigCPtr, GnssSignalConfiguration.getCPtr(config));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool rtkEnabled() {
    bool ret = msclPINVOKE.InertialNode_rtkEnabled(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enableRtk(bool enable) {
    msclPINVOKE.InertialNode_enableRtk(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public EventTriggerStatus getEventTriggerStatus(Bytes instances) {
    EventTriggerStatus ret = new EventTriggerStatus(msclPINVOKE.InertialNode_getEventTriggerStatus__SWIG_0(swigCPtr, Bytes.getCPtr(instances)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EventTriggerStatus getEventTriggerStatus() {
    EventTriggerStatus ret = new EventTriggerStatus(msclPINVOKE.InertialNode_getEventTriggerStatus__SWIG_1(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EventActionStatus getEventActionStatus(Bytes instances) {
    EventActionStatus ret = new EventActionStatus(msclPINVOKE.InertialNode_getEventActionStatus__SWIG_0(swigCPtr, Bytes.getCPtr(instances)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EventActionStatus getEventActionStatus() {
    EventActionStatus ret = new EventActionStatus(msclPINVOKE.InertialNode_getEventActionStatus__SWIG_1(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NmeaMessageFormats getNmeaMessageFormat() {
    NmeaMessageFormats ret = new NmeaMessageFormats(msclPINVOKE.InertialNode_getNmeaMessageFormat(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setNmeaMessageFormat(NmeaMessageFormats nmeaFormats) {
    msclPINVOKE.InertialNode_setNmeaMessageFormat(swigCPtr, NmeaMessageFormats.getCPtr(nmeaFormats));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
