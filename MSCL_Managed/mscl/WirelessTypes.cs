//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class WirelessTypes : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WirelessTypes(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WirelessTypes obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WirelessTypes() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_WirelessTypes(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public WirelessTypes() : this(msclPINVOKE.new_WirelessTypes(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum BeaconSource {
    beacon_none = 0,
    beacon_internalTimer = 1,
    beacon_internalPPS = 2,
    beacon_externalPPS = 3
  }

  public enum MicroControllerType {
    microcontroller_18F452 = 31,
    microcontroller_18F4620 = 32,
    microcontroller_18F46K20 = 33,
    microcontroller_18F67K90 = 34,
    microcontroller_EFM32WG990F256 = 35,
    microcontroller_EFR32FG1P132F256GM48 = 36,
    microcontroller_EFR32MG1P232F256GM48 = 37
  }

  public enum DataCollectionMethod {
    collectionMethod_logOnly = 1,
    collectionMethod_transmitOnly = 2,
    collectionMethod_logAndTransmit = 3
  }

  public enum DataType {
    dataType_first = 1,
    dataType_uint16_shifted = 1,
    dataType_float32 = 2,
    dataType_uint16_12bitRes = 3,
    dataType_uint32 = 4,
    dataType_uint16 = 7,
    dataType_float32_noCals = 8,
    dataType_uint24_18bitRes = 9,
    dataType_uint16_18bitTrunc = 10,
    dataType_int24_20bit = 11,
    dataType_int16_20bitTrunc = 12,
    dataType_uint24 = 13,
    dataType_uint16_24bitTrunc = 14,
    dataType_int16_x10 = 15,
    dataType_last = 15
  }

  public enum DataFormat {
    dataFormat_raw_uint16 = 1,
    dataFormat_cal_float = 2,
    dataFormat_raw_uint24 = 3,
    dataFormat_raw_int24 = 4,
    dataFormat_raw_int16 = 5,
    dataFormat_cal_int16_x10 = 6
  }

  public enum SyncSamplingMode {
    syncMode_continuous = 0x7400,
    syncMode_burst = 0xF600
  }

  public enum SamplingMode {
    samplingMode_sync = 1,
    samplingMode_syncBurst = 2,
    samplingMode_nonSync = 3,
    samplingMode_armedDatalog = 4,
    samplingMode_syncEvent = 5,
    samplingMode_nonSyncEvent = 6
  }

  public enum DefaultMode {
    defaultMode_idle = 0,
    defaultMode_ldc = 1,
    defaultMode_datalog = 4,
    defaultMode_sleep = 5,
    defaultMode_sync = 6
  }

  public enum Frequency {
    freq_unknown = 0,
    freq_11 = 11,
    freq_12 = 12,
    freq_13 = 13,
    freq_14 = 14,
    freq_15 = 15,
    freq_16 = 16,
    freq_17 = 17,
    freq_18 = 18,
    freq_19 = 19,
    freq_20 = 20,
    freq_21 = 21,
    freq_22 = 22,
    freq_23 = 23,
    freq_24 = 24,
    freq_25 = 25,
    freq_26 = 26
  }

  public enum TransmitPower {
    power_20dBm = 20,
    power_16dBm = 16,
    power_15dBm = 15,
    power_12dBm = 12,
    power_11dBm = 11,
    power_10dBm = 10,
    power_5dBm = 5,
    power_1dBm = 1,
    power_0dBm = 0
  }

  public enum NodeRetransmission {
    retransmission_off = 0,
    retransmission_on = 1,
    retransmission_disabled = 2
  }

  public enum TriggerType {
    trigger_userInit = 0,
    trigger_ceiling = 1,
    trigger_floor = 2,
    trigger_rampUp = 3,
    trigger_rampDown = 4
  }

  public enum CalCoef_EquationType {
    equation_none = 0,
    equation_standard = 4
  }

  public enum CalCoef_Unit {
    unit_none = 0,
    unit_other_bits = 1,
    unit_strain_strain = 2,
    unit_strain_microStrain = 3,
    unit_accel_g = 4,
    unit_accel_mPerSec2 = 5,
    unit_volts_volts = 6,
    unit_volts_millivolts = 7,
    unit_volts_microvolts = 8,
    unit_temp_celsius = 9,
    unit_temp_kelvin = 10,
    unit_temp_fahrenheit = 11,
    unit_displacement_meters = 12,
    unit_displacement_millimeters = 13,
    unit_displacement_micrometers = 14,
    unit_force_lbf = 15,
    unit_force_newtons = 16,
    unit_force_kiloNewtons = 17,
    unit_mass_kilograms = 18,
    unit_pressure_bar = 19,
    unit_pressure_psi = 20,
    unit_pressure_atm = 21,
    unit_pressure_mmHg = 22,
    unit_pressure_pascal = 23,
    unit_pressure_megaPascal = 24,
    unit_pressure_kiloPascal = 25,
    unit_angDisplacement_degrees = 26,
    unit_angVelocity_degreesPerSec = 27,
    unit_angVelocity_radiansPerSec = 28,
    unit_other_percent = 29,
    unit_freq_rpm = 30,
    unit_freq_hertz = 31,
    unit_rh_percentRh = 32,
    unit_other_mVperV = 33,
    unit_accel_milliG = 34,
    unit_accel_ftPerSec2 = 35,
    unit_other_percentLife = 36,
    unit_other_count = 37,
    unit_displacement_feet = 38,
    unit_displacement_inches = 39,
    unit_displacement_yards = 40,
    unit_displacement_miles = 41,
    unit_displacement_nautMiles = 42,
    unit_displacement_thouInch = 43,
    unit_displacement_hundInch = 44,
    unit_displacement_kilometers = 45,
    unit_displacement_centimeters = 46,
    unit_irradiance_wattsPerSqMeter = 47,
    unit_par_microEinstein = 48,
    unit_mass_pound = 49,
    unit_power_watt = 50,
    unit_power_milliwatt = 51,
    unit_power_horsepower = 52,
    unit_reactivePower_var = 53,
    unit_energy_wattHour = 54,
    unit_energy_kiloWattHour = 55,
    unit_reactiveEnergy_VARh = 56,
    unit_reactiveEnergy_kVARh = 57,
    unit_current_ampere = 58,
    unit_current_milliampere = 59,
    unit_current_microampere = 60,
    unit_pressure_millibar = 61,
    unit_pressure_inHg = 62,
    unit_rssi_dBm = 63,
    unit_freq_kiloHertz = 64,
    unit_angDisplacement_radians = 65,
    unit_velocity_metersPerSec = 66,
    unit_velocity_kilometersPerSec = 67,
    unit_velocity_kilometersPerHr = 68,
    unit_velocity_milesPerHr = 69,
    unit_velocity_knots = 70,
    unit_volume_cubicMeter = 71,
    unit_volume_cubicFt = 72,
    unit_volume_liters = 73,
    unit_volume_gallon = 74,
    unit_flowRate_cubicMetersPerSec = 75,
    unit_flowRate_cubicFtPerSec = 76,
    unit_torque_newtonMeter = 77,
    unit_torque_footPounds = 78,
    unit_torque_inchPounds = 79,
    unit_time_secs = 80,
    unit_time_nanosecs = 81,
    unit_time_microsecs = 82,
    unit_time_millisecs = 83,
    unit_time_minutes = 84,
    unit_time_hours = 85,
    unit_time_days = 86,
    unit_time_weeks = 87,
    unit_other_value = 88,
    unit_magneticFlux_gauss = 89,
    unit_other_gSec = 90,
    unit_other_secsPerSec = 91,
    unit_rssi_dBHz = 92,
    unit_density_kgPerMeter3 = 93,
    unit_other_unitless = 94,
    unit_velocity_inchesPerSec = 95,
    unit_force_kg = 96,
    unit_rawVoltage_volts = 97,
    unit_rawVoltage_millivolts = 98,
    unit_rawVoltage_microvolts = 99,
    unit_resistance_ohm = 100,
    unit_resistance_milliohm = 101,
    unit_resistance_kiloohm = 102,
    unit_velocity_mmPerSec = 103,
    unit_mass_grams = 104,
    unit_mass_ton = 105,
    unit_mass_tonne = 106
  }

  public enum ChannelType {
    chType_none = 0,
    chType_fullDifferential = 1,
    chType_singleEnded = 2,
    chType_battery = 3,
    chType_temperature = 4,
    chType_rh = 5,
    chType_acceleration = 6,
    chType_displacement = 7,
    chType_voltage = 8,
    chType_diffTemperature = 9,
    chType_digital = 10,
    chType_tilt = 11
  }

  public enum VoltageType {
    voltageType_singleEnded = 0,
    voltageType_differential = 1
  }

  public enum SettlingTime {
    settling_4ms = 1,
    settling_8ms = 2,
    settling_16ms = 3,
    settling_32ms = 4,
    settling_40ms = 5,
    settling_48ms = 6,
    settling_60ms = 7,
    settling_101ms_90db = 8,
    settling_120ms_80db = 9,
    settling_120ms_65db = 10,
    settling_160ms_69db = 11,
    settling_200ms = 12
  }

  public enum TransducerType {
    transducer_thermocouple = 0,
    transducer_rtd = 1,
    transducer_thermistor = 2
  }

  public enum ThermocoupleType {
    tc_uncompensated = 0,
    tc_K = 1,
    tc_J = 2,
    tc_R = 3,
    tc_S = 4,
    tc_T = 5,
    tc_E = 6,
    tc_B = 7,
    tc_N = 8,
    tc_customPolynomial = 9
  }

  public enum RtdType {
    rtd_uncompensated = 0,
    rtd_pt10 = 1,
    rtd_pt50 = 2,
    rtd_pt100 = 3,
    rtd_pt200 = 4,
    rtd_pt500 = 5,
    rtd_pt1000 = 6
  }

  public enum RtdWireType {
    rtd_2wire = 0,
    rtd_3wire = 1,
    rtd_4wire = 2
  }

  public enum ThermistorType {
    thermistor_uncompensated = 0,
    thermistor_44004_44033 = 1,
    thermistor_44005_44030 = 2,
    thermistor_44007_44034 = 3,
    thermistor_44006_44031 = 4,
    thermistor_44008_44032 = 5,
    thermistor_ysi_400 = 6
  }

  public enum WirelessSampleRate {
    sampleRate_104170Hz = 60,
    sampleRate_78125Hz = 58,
    sampleRate_62500Hz = 57,
    sampleRate_25000Hz = 56,
    sampleRate_12500Hz = 55,
    sampleRate_3200Hz = 49,
    sampleRate_1600Hz = 48,
    sampleRate_800Hz = 47,
    sampleRate_300Hz = 46,
    sampleRate_1kHz = 62,
    sampleRate_2kHz = 63,
    sampleRate_3kHz = 64,
    sampleRate_4kHz = 65,
    sampleRate_5kHz = 66,
    sampleRate_6kHz = 67,
    sampleRate_7kHz = 68,
    sampleRate_8kHz = 69,
    sampleRate_9kHz = 70,
    sampleRate_10kHz = 71,
    sampleRate_20kHz = 72,
    sampleRate_30kHz = 73,
    sampleRate_40kHz = 74,
    sampleRate_50kHz = 75,
    sampleRate_60kHz = 76,
    sampleRate_70kHz = 77,
    sampleRate_80kHz = 78,
    sampleRate_90kHz = 79,
    sampleRate_100kHz = 80,
    sampleRate_887Hz = 98,
    sampleRate_8192Hz = 100,
    sampleRate_4096Hz = 101,
    sampleRate_2048Hz = 102,
    sampleRate_1024Hz = 103,
    sampleRate_512Hz = 104,
    sampleRate_256Hz = 105,
    sampleRate_128Hz = 106,
    sampleRate_64Hz = 107,
    sampleRate_32Hz = 108,
    sampleRate_16Hz = 109,
    sampleRate_8Hz = 110,
    sampleRate_4Hz = 111,
    sampleRate_2Hz = 112,
    sampleRate_1Hz = 113,
    sampleRate_2Sec = 114,
    sampleRate_5Sec = 115,
    sampleRate_10Sec = 116,
    sampleRate_30Sec = 117,
    sampleRate_1Min = 118,
    sampleRate_2Min = 119,
    sampleRate_5Min = 120,
    sampleRate_10Min = 121,
    sampleRate_30Min = 122,
    sampleRate_60Min = 123,
    sampleRate_24Hours = 127
  }

  public enum RegionCode {
    region_usa = 0,
    region_europeanUnion = 1,
    region_japan = 2,
    region_other = 3,
    region_brazil = 4,
    region_china = 5,
    region_australia_newzealand = 6,
    region_singapore = 7,
    region_canada = 8,
    region_southAfrica = 9,
    region_indonesia = 10,
    region_taiwan = 11
  }

  public enum ChannelGroupSetting {
    chSetting_inputRange = 0,
    chSetting_filterSettlingTime = 1,
    chSetting_thermocoupleType = 2,
    chSetting_linearEquation = 3,
    chSetting_unit = 4,
    chSetting_equationType = 5,
    chSetting_hardwareOffset = 6,
    chSetting_autoBalance = 7,
    chSetting_gaugeFactor = 8,
    chSetting_antiAliasingFilter = 9,
    chSetting_legacyShuntCal = 10,
    chSetting_autoShuntCal = 11,
    chSetting_lowPassFilter = 12,
    chSetting_highPassFilter = 13,
    chSetting_tempSensorOptions = 14,
    chSetting_debounceFilter = 15,
    chSetting_pullUpResistor = 16,
    chSetting_factoryLinearEq = 17,
    chSetting_factoryUnit = 18,
    chSetting_factoryEqType = 19
  }

  public enum AutoBalanceErrorFlag {
    autobalance_success = 0,
    autobalance_maybeInvalid = 1,
    autobalance_notSupportedByNode = 2,
    autobalance_notSupportedByCh = 3,
    autobalance_targetOutOfRange = 4,
    autobalance_failed = 5,
    autobalance_legacyNone = 998,
    autobalance_notComplete = 999
  }

  public enum AutoCalCompletionFlag {
    autocal_success = 0,
    autocal_maybeInvalid_applied = 1,
    autocal_maybeInvalid_notApplied = 2,
    autocal_notComplete = 999
  }

  public enum AutoCalErrorFlag {
    autocalError_none = 0,
    autocalError_sensorDetached = 1,
    autocalError_sensorShorted = 2,
    autocalError_unsupportedChannel = 3,
    autocalError_baseHighRail = 4,
    autocalError_baseLowRail = 5,
    autocalError_shuntHighRail = 6,
    autocalError_shuntLowRail = 7,
    autocalError_ramp = 8,
    autocalError_noShunt = 9,
    autocalError_timeout = 10
  }

  public enum FatigueMode {
    fatigueMode_angleStrain = 0,
    fatigueMode_distributedAngle = 1,
    fatigueMode_rawGaugeStrain = 2
  }

  public enum EventTriggerType {
    eventTrigger_ceiling = 1,
    eventTrigger_floor = 2
  }

  public enum Filter {
    filter_33000hz = 33000,
    filter_20000hz = 20000,
    filter_10000hz = 10000,
    filter_5222hz = 5222,
    filter_5000hz = 5000,
    filter_4416hz = 4416,
    filter_4096hz = 4096,
    filter_4000hz = 4000,
    filter_2208hz = 2208,
    filter_2048hz = 2048,
    filter_2000hz = 2000,
    filter_1104hz = 1104,
    filter_1024hz = 1024,
    filter_1000hz = 1000,
    filter_800hz = 800,
    filter_552hz = 552,
    filter_512hz = 512,
    filter_500hz = 500,
    filter_418hz = 418,
    filter_294hz = 294,
    filter_256hz = 256,
    filter_250hz = 250,
    filter_209hz = 209,
    filter_200hz = 200,
    filter_147hz = 147,
    filter_128hz = 128,
    filter_125hz = 125,
    filter_104hz = 104,
    filter_100hz = 100,
    filter_62hz = 62,
    filter_52hz = 52,
    filter_50hz = 50,
    filter_31hz = 31,
    filter_26hz = 26,
    filter_12_66hz = 12,
    filter_2_6hz = 2
  }

  public enum HighPassFilter {
    highPass_off = 0,
    highPass_auto = 65535
  }

  public enum ChannelFrequencyClass {
    cfc_10 = 10,
    cfc_21 = 21,
    cfc_60 = 60
  }

  public enum StorageLimitMode {
    storageLimit_overwrite = 0,
    storageLimit_stop = 1
  }

  public enum InputRange {
    range_14_545mV = 0,
    range_10_236mV = 1,
    range_7_608mV = 2,
    range_4_046mV = 3,
    range_2_008mV = 4,
    range_1_511mV = 5,
    range_1_001mV = 6,
    range_0_812mV = 7,
    range_75mV = 8,
    range_37_5mV = 9,
    range_18_75mV = 10,
    range_9_38mV = 11,
    range_4_69mV = 12,
    range_2_34mV = 13,
    range_1_17mV = 14,
    range_0_586mV = 15,
    range_70mV = 16,
    range_35mV = 17,
    range_17_5mV = 18,
    range_8_75mV = 19,
    range_4_38mV = 20,
    range_2_19mV = 21,
    range_1_09mV = 22,
    range_0_547mV = 23,
    range_44mV = 24,
    range_30mV = 25,
    range_20mV = 26,
    range_15mV = 27,
    range_10mV = 28,
    range_5mV = 29,
    range_3mV = 30,
    range_2mV = 31,
    range_6mV = 32,
    range_1mV = 33,
    range_50mV = 34,
    range_2_5mV = 35,
    range_0_6mV = 36,
    range_0_35mV = 37,
    range_0_1mV = 38,
    range_156mV = 39,
    range_78_1mV = 40,
    range_39mV = 41,
    range_19_5mV = 42,
    range_9_76mV = 43,
    range_4_88mV = 44,
    range_2_44mV = 45,
    range_1_22mV = 46,
    range_10_24V = 47,
    range_5_12V = 48,
    range_2_56V = 49,
    range_0to10_24V = 50,
    range_0to5_12V = 51,
    range_1_147V = 52,
    range_585mV = 53,
    range_292_5mV = 54,
    range_146_25mV = 55,
    range_73_13mV = 56,
    range_36_56mV = 57,
    range_18_23mV = 58,
    range_9_14mV = 59,
    range_5_74V = 60,
    range_2_93V = 61,
    range_1_46V = 62,
    range_731_3mV = 63,
    range_365_6mV = 64,
    range_182_8mV = 65,
    range_91_4mV = 66,
    range_45_7mV = 67,
    range_62_5mV = 68,
    range_31_25mV = 69,
    range_15_63mV = 70,
    range_7_81mV = 71,
    range_3_91mV = 72,
    range_1_95mV = 73,
    range_0_976mV = 74,
    range_0_488mV = 75,
    range_2G = 76,
    range_4G = 77,
    range_8G = 78,
    range_10G = 79,
    range_20G = 80,
    range_40G = 81,
    range_2_5V = 82,
    range_1_25V = 83,
    range_625mV = 84,
    range_312_5mV = 85,
    range_156_25mV = 86,
    range_78_125mV = 87,
    range_39_063mV = 88,
    range_19_532mV = 89,
    range_0to2_5V = 90,
    range_0to1_25V = 91,
    range_0to625mV = 92,
    range_0to312_5mV = 93,
    range_0to156_25mV = 94,
    range_0to78_125mV = 95,
    range_0to39_063mV = 96,
    range_0to19_532mV = 97,
    range_9_766mV = 98,
    range_1_35V_or_0to1000000ohm = 99,
    range_1_25V_or_0to10000ohm = 100,
    range_625mV_or_0to3333_3ohm = 101,
    range_312_5mV_or_0to1428_6ohm = 102,
    range_156_25mV_or_0to666_67ohm = 103,
    range_78_125mV_or_0to322_58ohm = 104,
    range_39_0625mV_or_0to158_73ohm = 105,
    range_19_5313mV_or_0to78_74ohm = 106,
    range_750mV = 107,
    range_375mV = 108,
    range_187_5mV = 109,
    range_93_75mV = 110,
    range_46_875mV = 111,
    range_23_438mV = 112,
    range_11_719mV = 113,
    range_5_859mV = 114,
    range_0to1_5V = 115,
    range_0to750mV = 116,
    range_0to375mV = 117,
    range_0to187_5mV = 118,
    range_0to93_75mV = 119,
    range_0to46_875mV = 120,
    range_0to23_438mV = 121,
    range_0to11_719mV = 122,
    range_1_5V = 123,
    range_1_35V = 124,
    range_0to1000000ohm = 125,
    range_0to10000ohm = 126,
    range_0to3333_3ohm = 127,
    range_0to1428_6ohm = 128,
    range_0to666_67ohm = 129,
    range_0to322_58ohm = 130,
    range_0to158_73ohm = 131,
    range_0to78_74ohm = 132,
    range_39_0625mV = 133,
    range_19_5313mV = 134,
    range_125mV = 135,
    range_invalid = 65535
  }

  public enum DataMode {
    dataMode_none = 0,
    dataMode_raw = 1,
    dataMode_derived = 2,
    dataMode_raw_derived = 3
  }

  public enum DerivedCategory {
    derivedCategory_rms = 0,
    derivedCategory_peakToPeak = 1,
    derivedCategory_velocity = 2,
    derivedCategory_crestFactor = 3,
    derivedCategory_mean = 4
  }

  public enum DerivedDataPacketAlgorithmId {
    derivedAlgId_rms = 0,
    derivedAlgId_peakToPeak = 1,
    derivedAlgId_ips = 2,
    derivedAlgId_crestFactor = 3,
    derivedAlgId_mean = 4,
    derivedAlgId_mmps = 5
  }

  public enum DerivedVelocityUnit {
    derivedVelocity_ips = 0,
    derivedVelocity_mmps = 1
  }

  public enum CommProtocol {
    commProtocol_lxrs = 0,
    commProtocol_lxrsPlus = 1
  }

  public enum Voltage {
    voltage_5120mV = 5120,
    voltage_5000mV = 5000,
    voltage_4096mV = 4096,
    voltage_3000mV = 3000,
    voltage_2800mV = 2800,
    voltage_2750mV = 2750,
    voltage_2700mV = 2700,
    voltage_2500mV = 2500,
    voltage_1500mV = 1500
  }

  public enum SensorOutputMode {
    sensorOutputMode_accel = 0,
    sensorOutputMode_tilt = 1
  }

  public enum BatteryStatus {
    batteryStatus_good = 0,
    batteryStatus_low = 1,
    batteryStatus_critical = 2
  }

  public enum ExternalPowerIndicator {
    externalPower_notConnected = 0,
    externalPower_connected = 1
  }

  public enum DelayVersion {
    delayVersion_v1 = 0,
    delayVersion_v2 = 1,
    delayVersion_v3 = 2,
    delayVersion_v4 = 3
  }

  public static readonly short UNKNOWN_RSSI = msclPINVOKE.WirelessTypes_UNKNOWN_RSSI_get();
}

}
