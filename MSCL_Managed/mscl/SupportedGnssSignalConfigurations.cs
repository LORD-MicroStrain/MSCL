//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class SupportedGnssSignalConfigurations : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SupportedGnssSignalConfigurations(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SupportedGnssSignalConfigurations obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SupportedGnssSignalConfigurations() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_SupportedGnssSignalConfigurations(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SupportedGnssSignalConfigurations() : this(msclPINVOKE.new_SupportedGnssSignalConfigurations__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SupportedGnssSignalConfigurations(Bytes gps, Bytes glonass, Bytes galileo, Bytes beidou) : this(msclPINVOKE.new_SupportedGnssSignalConfigurations__SWIG_1(Bytes.getCPtr(gps), Bytes.getCPtr(glonass), Bytes.getCPtr(galileo), Bytes.getCPtr(beidou)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bytes gps() {
    Bytes ret = new Bytes(msclPINVOKE.SupportedGnssSignalConfigurations_gps(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bytes glonass() {
    Bytes ret = new Bytes(msclPINVOKE.SupportedGnssSignalConfigurations_glonass(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bytes galileo() {
    Bytes ret = new Bytes(msclPINVOKE.SupportedGnssSignalConfigurations_galileo(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Bytes beidou() {
    Bytes ret = new Bytes(msclPINVOKE.SupportedGnssSignalConfigurations_beidou(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
