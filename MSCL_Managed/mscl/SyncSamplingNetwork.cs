//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class SyncSamplingNetwork : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SyncSamplingNetwork(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SyncSamplingNetwork obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SyncSamplingNetwork() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_SyncSamplingNetwork(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SyncSamplingNetwork(BaseStation networkBaseStation) : this(msclPINVOKE.new_SyncSamplingNetwork(BaseStation.getCPtr(networkBaseStation)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addNode(WirelessNode node) {
    msclPINVOKE.SyncSamplingNetwork_addNode__SWIG_0(swigCPtr, WirelessNode.getCPtr(node));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addNode(WirelessNode node, WirelessNodeConfig pendingConfig) {
    msclPINVOKE.SyncSamplingNetwork_addNode__SWIG_1(swigCPtr, WirelessNode.getCPtr(node), WirelessNodeConfig.getCPtr(pendingConfig));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeNode(uint nodeAddress) {
    msclPINVOKE.SyncSamplingNetwork_removeNode(swigCPtr, nodeAddress);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float percentBandwidth() {
    float ret = msclPINVOKE.SyncSamplingNetwork_percentBandwidth(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ok() {
    bool ret = msclPINVOKE.SyncSamplingNetwork_ok(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void refresh() {
    msclPINVOKE.SyncSamplingNetwork_refresh(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool lossless() {
    bool ret = msclPINVOKE.SyncSamplingNetwork_lossless__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void lossless(bool enable) {
    msclPINVOKE.SyncSamplingNetwork_lossless__SWIG_1(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.CommProtocol communicationProtocol() {
    WirelessTypes.CommProtocol ret = (WirelessTypes.CommProtocol)msclPINVOKE.SyncSamplingNetwork_communicationProtocol__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void communicationProtocol(WirelessTypes.CommProtocol protocol) {
    msclPINVOKE.SyncSamplingNetwork_communicationProtocol__SWIG_1(swigCPtr, (int)protocol);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyConfiguration() {
    msclPINVOKE.SyncSamplingNetwork_applyConfiguration(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startSampling() {
    msclPINVOKE.SyncSamplingNetwork_startSampling__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startSampling(Timestamp startTime) {
    msclPINVOKE.SyncSamplingNetwork_startSampling__SWIG_1(swigCPtr, Timestamp.getCPtr(startTime));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startSampling_noBeacon() {
    msclPINVOKE.SyncSamplingNetwork_startSampling_noBeacon(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SyncNetworkInfo getNodeNetworkInfo(uint nodeAddress) {
    SyncNetworkInfo ret = new SyncNetworkInfo(msclPINVOKE.SyncSamplingNetwork_getNodeNetworkInfo(swigCPtr, nodeAddress), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
