//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class GQ7ContinuousBIT_GNSS_Receivers : Bitfield {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GQ7ContinuousBIT_GNSS_Receivers(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GQ7ContinuousBIT_GNSS_Receivers obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_GQ7ContinuousBIT_GNSS_Receivers(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public GQ7ContinuousBIT_GNSS_Receivers() : this(msclPINVOKE.new_GQ7ContinuousBIT_GNSS_Receivers__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GQ7ContinuousBIT_GNSS_Receivers(ushort bits) : this(msclPINVOKE.new_GQ7ContinuousBIT_GNSS_Receivers__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort flags() {
    ushort ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_flags(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool powerFaultReceiver1() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_powerFaultReceiver1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool faultReceiver1() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_faultReceiver1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool shortedAntenna1() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_shortedAntenna1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool openAntenna1() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_openAntenna1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool solutionFaultReceiver1() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_solutionFaultReceiver1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool powerFaultReceiver2() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_powerFaultReceiver2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool faultReceiver2() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_faultReceiver2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool shortedAntenna2() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_shortedAntenna2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool openAntenna2() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_openAntenna2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool solutionFaultReceiver2() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_solutionFaultReceiver2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool rtcmCommunicationFault() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_rtcmCommunicationFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool rtkDongleFault() {
    bool ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_rtkDongleFault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly ushort POWER_FAULT_RECEIVER_1 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_POWER_FAULT_RECEIVER_1_get();
  public static readonly ushort FAULT_RECEIVER_1 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_FAULT_RECEIVER_1_get();
  public static readonly ushort SHORTED_ANTENNA_1 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_SHORTED_ANTENNA_1_get();
  public static readonly ushort OPEN_ANTENNA_1 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_OPEN_ANTENNA_1_get();
  public static readonly ushort SOLUTION_FAULT_RECEIVER_1 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_SOLUTION_FAULT_RECEIVER_1_get();
  public static readonly ushort POWER_FAULT_RECEIVER_2 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_POWER_FAULT_RECEIVER_2_get();
  public static readonly ushort FAULT_RECEIVER_2 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_FAULT_RECEIVER_2_get();
  public static readonly ushort SHORTED_ANTENNA_2 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_SHORTED_ANTENNA_2_get();
  public static readonly ushort OPEN_ANTENNA_2 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_OPEN_ANTENNA_2_get();
  public static readonly ushort SOLUTION_FAULT_RECEIVER_2 = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_SOLUTION_FAULT_RECEIVER_2_get();
  public static readonly ushort RTCM_COMMUNICATION_FAULT = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_RTCM_COMMUNICATION_FAULT_get();
  public static readonly ushort RTK_DONGLE_FAULT = msclPINVOKE.GQ7ContinuousBIT_GNSS_Receivers_RTK_DONGLE_FAULT_get();
}

}
