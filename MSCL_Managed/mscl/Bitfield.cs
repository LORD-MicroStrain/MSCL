//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class Bitfield : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Bitfield(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bitfield obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Bitfield() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_Bitfield(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Bitfield() : this(msclPINVOKE.new_Bitfield__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bitfield(ulong val) : this(msclPINVOKE.new_Bitfield__SWIG_1(val), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong value() {
    ulong ret = msclPINVOKE.Bitfield_value__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void value(ulong val) {
    msclPINVOKE.Bitfield_value__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong get(ulong mask, bool shiftToLsb) {
    ulong ret = msclPINVOKE.Bitfield_get__SWIG_0(swigCPtr, mask, shiftToLsb);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong get(ulong mask) {
    ulong ret = msclPINVOKE.Bitfield_get__SWIG_1(swigCPtr, mask);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(ulong mask, ulong value, bool shiftRequired) {
    msclPINVOKE.Bitfield_set__SWIG_0(swigCPtr, mask, value, shiftRequired);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(ulong mask, ulong value) {
    msclPINVOKE.Bitfield_set__SWIG_1(swigCPtr, mask, value);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool checkBit(byte bitIndex, byte indexBase) {
    bool ret = msclPINVOKE.Bitfield_checkBit__SWIG_0(swigCPtr, bitIndex, indexBase);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkBit(byte bitIndex) {
    bool ret = msclPINVOKE.Bitfield_checkBit__SWIG_1(swigCPtr, bitIndex);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBit(byte bitIndex, bool value, byte indexBase) {
    msclPINVOKE.Bitfield_setBit__SWIG_0(swigCPtr, bitIndex, value, indexBase);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBit(byte bitIndex, bool value) {
    msclPINVOKE.Bitfield_setBit__SWIG_1(swigCPtr, bitIndex, value);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
