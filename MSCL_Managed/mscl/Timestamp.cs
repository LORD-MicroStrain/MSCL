//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class Timestamp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Timestamp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Timestamp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Timestamp() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_Timestamp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Timestamp(ulong nanoseconds, Timestamp.Epoch epoch) : this(msclPINVOKE.new_Timestamp__SWIG_0(nanoseconds, (int)epoch), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timestamp(ulong nanoseconds) : this(msclPINVOKE.new_Timestamp__SWIG_1(nanoseconds), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timestamp() : this(msclPINVOKE.new_Timestamp__SWIG_2(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timestamp(ushort year, ushort month, ushort day, ushort hour, ushort minute, ushort second, uint milli) : this(msclPINVOKE.new_Timestamp__SWIG_3(year, month, day, hour, minute, second, milli), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong nanoseconds(Timestamp.Epoch epoch) {
    ulong ret = msclPINVOKE.Timestamp_nanoseconds__SWIG_0(swigCPtr, (int)epoch);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong nanoseconds() {
    ulong ret = msclPINVOKE.Timestamp_nanoseconds__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong seconds(Timestamp.Epoch epoch) {
    ulong ret = msclPINVOKE.Timestamp_seconds__SWIG_0(swigCPtr, (int)epoch);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong seconds() {
    ulong ret = msclPINVOKE.Timestamp_seconds__SWIG_1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = msclPINVOKE.Timestamp_ToString(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTime(ulong nanosSinceEpoch, Timestamp.Epoch epoch) {
    msclPINVOKE.Timestamp_setTime__SWIG_0(swigCPtr, nanosSinceEpoch, (int)epoch);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTime(ulong nanosSinceEpoch) {
    msclPINVOKE.Timestamp_setTime__SWIG_1(swigCPtr, nanosSinceEpoch);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTimeNow() {
    msclPINVOKE.Timestamp_setTimeNow(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Timestamp timeNow() {
    Timestamp ret = new Timestamp(msclPINVOKE.Timestamp_timeNow(), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void setLeapSeconds(byte gpsLeapSeconds) {
    msclPINVOKE.Timestamp_setLeapSeconds(gpsLeapSeconds);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static byte getLeapSeconds() {
    byte ret = msclPINVOKE.Timestamp_getLeapSeconds();
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong gpsTimeToUtcTime(double timeOfWeek, ushort weekNumber) {
    ulong ret = msclPINVOKE.Timestamp_gpsTimeToUtcTime__SWIG_0(timeOfWeek, weekNumber);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong gpsTimeToUtcTime(ulong gpsNanoseconds) {
    ulong ret = msclPINVOKE.Timestamp_gpsTimeToUtcTime__SWIG_1(gpsNanoseconds);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong utcTimeToGpsTime(ulong utcNanoseconds) {
    ulong ret = msclPINVOKE.Timestamp_utcTimeToGpsTime(utcNanoseconds);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Epoch {
    UNIX = 0x01,
    GPS = 0x02
  }

}

}
