//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class GQ7ContinuousBIT_GNSS : Bitfield {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GQ7ContinuousBIT_GNSS(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.GQ7ContinuousBIT_GNSS_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GQ7ContinuousBIT_GNSS obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_GQ7ContinuousBIT_GNSS(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public GQ7ContinuousBIT_GNSS() : this(msclPINVOKE.new_GQ7ContinuousBIT_GNSS__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public GQ7ContinuousBIT_GNSS(uint bits) : this(msclPINVOKE.new_GQ7ContinuousBIT_GNSS__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint flags() {
    uint ret = msclPINVOKE.GQ7ContinuousBIT_GNSS_flags(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GQ7ContinuousBIT_GNSS_General general() {
    GQ7ContinuousBIT_GNSS_General ret = new GQ7ContinuousBIT_GNSS_General(msclPINVOKE.GQ7ContinuousBIT_GNSS_general(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GQ7ContinuousBIT_GNSS_Receivers receivers() {
    GQ7ContinuousBIT_GNSS_Receivers ret = new GQ7ContinuousBIT_GNSS_Receivers(msclPINVOKE.GQ7ContinuousBIT_GNSS_receivers(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly byte RESPONSE_OFFSET = msclPINVOKE.GQ7ContinuousBIT_GNSS_RESPONSE_OFFSET_get();
  public static readonly uint GENERAL_FLAGS = msclPINVOKE.GQ7ContinuousBIT_GNSS_GENERAL_FLAGS_get();
  public static readonly uint RECEIVERS_FLAGS = msclPINVOKE.GQ7ContinuousBIT_GNSS_RECEIVERS_FLAGS_get();
}

}
