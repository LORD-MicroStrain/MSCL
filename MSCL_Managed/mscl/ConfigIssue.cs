//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class ConfigIssue : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ConfigIssue(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConfigIssue obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ConfigIssue() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_ConfigIssue(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ConfigIssue() : this(msclPINVOKE.new_ConfigIssue__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConfigIssue(ConfigIssue.ConfigOption optionId, string description) : this(msclPINVOKE.new_ConfigIssue__SWIG_1((int)optionId, description), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConfigIssue(ConfigIssue.ConfigOption optionId, string description, ChannelMask mask) : this(msclPINVOKE.new_ConfigIssue__SWIG_2((int)optionId, description, ChannelMask.getCPtr(mask)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ConfigIssue.ConfigOption id() {
    ConfigIssue.ConfigOption ret = (ConfigIssue.ConfigOption)msclPINVOKE.ConfigIssue_id(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string description() {
    string ret = msclPINVOKE.ConfigIssue_description(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isChannelGroupIssue() {
    bool ret = msclPINVOKE.ConfigIssue_isChannelGroupIssue(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChannelMask channelMask() {
    ChannelMask ret = new ChannelMask(msclPINVOKE.ConfigIssue_channelMask(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum ConfigOption {
    CONFIG_SAMPLING_MODE = 0,
    CONFIG_ACTIVE_CHANNELS = 1,
    CONFIG_SAMPLE_RATE = 2,
    CONFIG_SWEEPS = 3,
    CONFIG_UNLIMITED_DURATION = 4,
    CONFIG_DATA_FORMAT = 5,
    CONFIG_DATA_COLLECTION_METHOD = 6,
    CONFIG_TIME_BETWEEN_BURSTS = 7,
    CONFIG_THERMOCOUPLE_TYPE = 8,
    CONFIG_FILTER_SETTLING_TIME = 9,
    CONFIG_BUTTON = 10,
    CONFIG_ANALOG_PAIR = 11,
    CONFIG_INPUT_RANGE = 12,
    CONFIG_INACTIVITY_TIMEOUT = 13,
    CONFIG_CHECK_RADIO_INTERVAL = 14,
    CONFIG_LOST_BEACON_TIMEOUT = 15,
    CONFIG_DEFAULT_MODE = 16,
    CONFIG_TRANSMIT_POWER = 17,
    CONFIG_LINEAR_EQUATION = 18,
    CONFIG_FATIGUE = 19,
    CONFIG_FATIGUE_MODE = 20,
    CONFIG_FATIGUE_ANGLE_ID = 21,
    CONFIG_FATIGUE_SN_CURVE = 22,
    CONFIG_FATIGUE_DIST_NUM_ANGLES = 23,
    CONFIG_FATIGUE_DIST_ANGLE = 24,
    CONFIG_HISTOGRAM = 25,
    CONFIG_HISTOGRAM_TX_RATE = 26,
    CONFIG_HARDWARE_OFFSET = 27,
    CONFIG_ACTIVITY_SENSE = 28,
    CONFIG_GAUGE_FACTOR = 29,
    CONFIG_EVENT_TRIGGER = 30,
    CONFIG_EVENT_TRIGGER_DURATION = 31,
    CONFIG_EVENT_TRIGGER_MASK = 32,
    CONFIG_DIAGNOSTIC_INTERVAL = 33,
    CONFIG_ANTI_ALIASING_FILTER = 34,
    CONFIG_STORAGE_LIMIT_MODE = 35,
    CONFIG_SENSOR_DELAY = 36,
    CONFIG_LOW_PASS_FILTER = 37,
    CONFIG_DATA_MODE = 38,
    CONFIG_DERIVED_DATA_RATE = 39,
    CONFIG_DERIVED_MASK_RMS = 40,
    CONFIG_DERIVED_MASK_P2P = 41,
    CONFIG_DERIVED_MASK_IPS = 42,
    CONFIG_DERIVED_MASK_CREST_FACTOR = 43,
    CONFIG_HIGH_PASS_FILTER = 44,
    CONFIG_DERIVED_MASK = 45,
    CONFIG_COMM_PROTOCOL = 46,
    CONFIG_DERIVED_MASK_MEAN = 47,
    CONFIG_GAUGE_RESISTANCE = 48,
    CONFIG_NUM_ACTIVE_GAUGES = 49
  }

}

}
