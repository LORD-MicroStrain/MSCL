//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class TempSensorOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TempSensorOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TempSensorOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TempSensorOptions() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_TempSensorOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static TempSensorOptions Thermocouple(WirelessTypes.ThermocoupleType thermocouple) {
    TempSensorOptions ret = new TempSensorOptions(msclPINVOKE.TempSensorOptions_Thermocouple((int)thermocouple), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TempSensorOptions RTD(WirelessTypes.RtdWireType wire, WirelessTypes.RtdType rtd) {
    TempSensorOptions ret = new TempSensorOptions(msclPINVOKE.TempSensorOptions_RTD((int)wire, (int)rtd), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TempSensorOptions Thermistor(WirelessTypes.ThermistorType thermistor) {
    TempSensorOptions ret = new TempSensorOptions(msclPINVOKE.TempSensorOptions_Thermistor((int)thermistor), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.TransducerType transducerType() {
    WirelessTypes.TransducerType ret = (WirelessTypes.TransducerType)msclPINVOKE.TempSensorOptions_transducerType(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.ThermocoupleType thermocoupleType() {
    WirelessTypes.ThermocoupleType ret = (WirelessTypes.ThermocoupleType)msclPINVOKE.TempSensorOptions_thermocoupleType(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.RtdType rtdType() {
    WirelessTypes.RtdType ret = (WirelessTypes.RtdType)msclPINVOKE.TempSensorOptions_rtdType(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.RtdWireType rtdWireType() {
    WirelessTypes.RtdWireType ret = (WirelessTypes.RtdWireType)msclPINVOKE.TempSensorOptions_rtdWireType(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.ThermistorType thermistorType() {
    WirelessTypes.ThermistorType ret = (WirelessTypes.ThermistorType)msclPINVOKE.TempSensorOptions_thermistorType(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
