//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class AutoCalResult_shmLink : AutoCalResult {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AutoCalResult_shmLink(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.AutoCalResult_shmLink_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AutoCalResult_shmLink obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AutoCalResult_shmLink() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_AutoCalResult_shmLink(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public AutoCalResult_shmLink() : this(msclPINVOKE.new_AutoCalResult_shmLink(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.AutoCalErrorFlag errorFlagCh1() {
    WirelessTypes.AutoCalErrorFlag ret = (WirelessTypes.AutoCalErrorFlag)msclPINVOKE.AutoCalResult_shmLink_errorFlagCh1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.AutoCalErrorFlag errorFlagCh2() {
    WirelessTypes.AutoCalErrorFlag ret = (WirelessTypes.AutoCalErrorFlag)msclPINVOKE.AutoCalResult_shmLink_errorFlagCh2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WirelessTypes.AutoCalErrorFlag errorFlagCh3() {
    WirelessTypes.AutoCalErrorFlag ret = (WirelessTypes.AutoCalErrorFlag)msclPINVOKE.AutoCalResult_shmLink_errorFlagCh3(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float offsetCh1() {
    float ret = msclPINVOKE.AutoCalResult_shmLink_offsetCh1(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float offsetCh2() {
    float ret = msclPINVOKE.AutoCalResult_shmLink_offsetCh2(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float offsetCh3() {
    float ret = msclPINVOKE.AutoCalResult_shmLink_offsetCh3(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float temperature() {
    float ret = msclPINVOKE.AutoCalResult_shmLink_temperature(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
