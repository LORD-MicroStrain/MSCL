//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class CV7ContinuousBIT_Filter : Bitfield {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CV7ContinuousBIT_Filter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.CV7ContinuousBIT_Filter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CV7ContinuousBIT_Filter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_CV7ContinuousBIT_Filter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CV7ContinuousBIT_Filter() : this(msclPINVOKE.new_CV7ContinuousBIT_Filter__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public CV7ContinuousBIT_Filter(uint bits) : this(msclPINVOKE.new_CV7ContinuousBIT_Filter__SWIG_1(bits), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte generalFlags() {
    byte ret = msclPINVOKE.CV7ContinuousBIT_Filter_generalFlags(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool fault() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_Filter_fault(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool timingOverrun() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_Filter_timingOverrun(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool timingUnderrun() {
    bool ret = msclPINVOKE.CV7ContinuousBIT_Filter_timingUnderrun(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly uint FAULT = msclPINVOKE.CV7ContinuousBIT_Filter_FAULT_get();
  public static readonly uint TIMING_OVERRUN = msclPINVOKE.CV7ContinuousBIT_Filter_TIMING_OVERRUN_get();
  public static readonly uint TIMING_UNDERRUN = msclPINVOKE.CV7ContinuousBIT_Filter_TIMING_UNDERRUN_get();
}

}
