//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class MipSharedDataFields : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MipSharedDataFields(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MipSharedDataFields obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MipSharedDataFields() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_MipSharedDataFields(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MipSharedDataFields() : this(msclPINVOKE.new_MipSharedDataFields(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasEventSource() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasEventSource(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte eventSource() {
    byte ret = msclPINVOKE.MipSharedDataFields_eventSource(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasTicks() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasTicks(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint ticks() {
    uint ret = msclPINVOKE.MipSharedDataFields_ticks(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasDeltaTicks() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasDeltaTicks(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint deltaTicks() {
    uint ret = msclPINVOKE.MipSharedDataFields_deltaTicks(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasGpsTimestamp() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasGpsTimestamp(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp gpsTimestamp() {
    Timestamp ret = new Timestamp(msclPINVOKE.MipSharedDataFields_gpsTimestamp(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool gpsTimestampValid() {
    bool ret = msclPINVOKE.MipSharedDataFields_gpsTimestampValid(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasDeltaTime() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasDeltaTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double deltaTime() {
    double ret = msclPINVOKE.MipSharedDataFields_deltaTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasReferenceTime() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasReferenceTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong referenceTime() {
    ulong ret = msclPINVOKE.MipSharedDataFields_referenceTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasDeltaReferenceTime() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasDeltaReferenceTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong deltaReferenceTime() {
    ulong ret = msclPINVOKE.MipSharedDataFields_deltaReferenceTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasExternalTimestamp() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasExternalTimestamp(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp externalTimestamp() {
    Timestamp ret = new Timestamp(msclPINVOKE.MipSharedDataFields_externalTimestamp(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool externalTimestampValid() {
    bool ret = msclPINVOKE.MipSharedDataFields_externalTimestampValid(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasDeltaExternalTime() {
    bool ret = msclPINVOKE.MipSharedDataFields_hasDeltaExternalTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong deltaExternalTime() {
    ulong ret = msclPINVOKE.MipSharedDataFields_deltaExternalTime(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool deltaExternalTimeValid() {
    bool ret = msclPINVOKE.MipSharedDataFields_deltaExternalTimeValid(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipDataPoint get(MipTypes.ChannelField field, MipTypes.ChannelQualifier qualifier) {
    MipDataPoint ret = new MipDataPoint(msclPINVOKE.MipSharedDataFields_get__SWIG_0(swigCPtr, (int)field, (int)qualifier), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipDataPoint get(MipTypes.ChannelField field) {
    MipDataPoint ret = new MipDataPoint(msclPINVOKE.MipSharedDataFields_get__SWIG_1(swigCPtr, (int)field), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EventSource {
    EVENT_SOURCE_NONE = 0x00,
    EVENT_SOURCE_UNKNOWN = 0xFF
  }

}

}
