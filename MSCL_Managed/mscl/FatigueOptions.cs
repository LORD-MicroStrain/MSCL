//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.6
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class FatigueOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FatigueOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FatigueOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FatigueOptions() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_FatigueOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FatigueOptions() : this(msclPINVOKE.new_FatigueOptions(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float youngsModulus() {
    float ret = msclPINVOKE.FatigueOptions_youngsModulus__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void youngsModulus(float val) {
    msclPINVOKE.FatigueOptions_youngsModulus__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float poissonsRatio() {
    float ret = msclPINVOKE.FatigueOptions_poissonsRatio__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void poissonsRatio(float val) {
    msclPINVOKE.FatigueOptions_poissonsRatio__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort peakValleyThreshold() {
    ushort ret = msclPINVOKE.FatigueOptions_peakValleyThreshold__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void peakValleyThreshold(ushort val) {
    msclPINVOKE.FatigueOptions_peakValleyThreshold__SWIG_1(swigCPtr, val);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool debugMode() {
    bool ret = msclPINVOKE.FatigueOptions_debugMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void debugMode(bool enable) {
    msclPINVOKE.FatigueOptions_debugMode__SWIG_1(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float damageAngle(byte angleId) {
    float ret = msclPINVOKE.FatigueOptions_damageAngle__SWIG_0(swigCPtr, angleId);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DamageAngles damageAngles() {
    DamageAngles ret = new DamageAngles(msclPINVOKE.FatigueOptions_damageAngles(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void damageAngle(byte angleId, float angle) {
    msclPINVOKE.FatigueOptions_damageAngle__SWIG_1(swigCPtr, angleId, angle);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public SnCurveSegment snCurveSegment(byte segmentId) {
    SnCurveSegment ret = new SnCurveSegment(msclPINVOKE.FatigueOptions_snCurveSegment__SWIG_0(swigCPtr, segmentId), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SnCurveSegments snCurveSegments() {
    SnCurveSegments ret = new SnCurveSegments(msclPINVOKE.FatigueOptions_snCurveSegments(swigCPtr), false);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void snCurveSegment(byte segmentId, SnCurveSegment segment) {
    msclPINVOKE.FatigueOptions_snCurveSegment__SWIG_1(swigCPtr, segmentId, SnCurveSegment.getCPtr(segment));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public WirelessTypes.FatigueMode fatigueMode() {
    WirelessTypes.FatigueMode ret = (WirelessTypes.FatigueMode)msclPINVOKE.FatigueOptions_fatigueMode__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fatigueMode(WirelessTypes.FatigueMode mode) {
    msclPINVOKE.FatigueOptions_fatigueMode__SWIG_1(swigCPtr, (int)mode);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte distributedAngleMode_numAngles() {
    byte ret = msclPINVOKE.FatigueOptions_distributedAngleMode_numAngles__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void distributedAngleMode_numAngles(byte numAngles) {
    msclPINVOKE.FatigueOptions_distributedAngleMode_numAngles__SWIG_1(swigCPtr, numAngles);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float distributedAngleMode_lowerBound() {
    float ret = msclPINVOKE.FatigueOptions_distributedAngleMode_lowerBound__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void distributedAngleMode_lowerBound(float angle) {
    msclPINVOKE.FatigueOptions_distributedAngleMode_lowerBound__SWIG_1(swigCPtr, angle);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float distributedAngleMode_upperBound() {
    float ret = msclPINVOKE.FatigueOptions_distributedAngleMode_upperBound__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void distributedAngleMode_upperBound(float angle) {
    msclPINVOKE.FatigueOptions_distributedAngleMode_upperBound__SWIG_1(swigCPtr, angle);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool histogramEnable() {
    bool ret = msclPINVOKE.FatigueOptions_histogramEnable__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void histogramEnable(bool enable) {
    msclPINVOKE.FatigueOptions_histogramEnable__SWIG_1(swigCPtr, enable);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
