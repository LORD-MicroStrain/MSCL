ARG ARCH="amd64"
ARG CENTOS_VERSION="7"
FROM ${ARCH}/centos:${CENTOS_VERSION}

# Run all commands with bash
SHELL ["/bin/bash", "-c", "-l"]

# Add some CA certificates
COPY .devcontainer/extra_cas /etc/pki/ca-trust/source/anchors
RUN set -ex && update-ca-trust

# Install some build tools
RUN set -ex \
    && yum -y groupinstall "Development Tools" \
    && yum -y install \
        git \
        gdb \
        vim \
        curl \
        make \
        subversion \
        bash-completion

# Install OpenSSL
RUN set -ex \
    && yum -y install \
        openssl-devel \
        openssl-static

# Add some python dependencies
RUN set -ex && yum -y install python2-devel || yum -y install python-devel

# Install an updated version of gcc and then configure us to use it from now on
RUN set -ex \
    && yum -y install \
        centos-release-scl \
    && yum -y install \
        devtoolset-7 \
    && echo '. /opt/rh/devtoolset-7/enable' >> ~/.bashrc

# We need CMake 3 for MSCL, so install that here
ARG CMAKE_VERSION="3.23.0"
RUN set -ex \
    && yum -y install epel-release \
    && export CMAKE_MAJOR_VERSION=$(echo ${CMAKE_VERSION} | cut -d"." -f-2) \
    && curl -fsSLo /tmp/cmake-${CMAKE_VERSION}.tar.gz https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_VERSION}.tar.gz \
    && tar -C /tmp/ -xzf /tmp/cmake-${CMAKE_VERSION}.tar.gz \
    && cd /tmp/cmake-${CMAKE_VERSION} \
    && ./bootstrap \
        --prefix="/usr" \
        --parallel=$(nproc) \
        -- \
        -DCMAKE_INSTALL_PREFIX="/usr" \
        -DCMAKE_BUILD_TYPE="RELEASE" \
        -DCMAKE_USE_OPENSSL=OFF \
    && make -j$(nproc) \
    && make install \
    && rm -rf /tmp/cmake-*

# Install additional python versions
ARG PYTHON3_VERSIONS="3.5.10 3.6.15"
RUN set -ex \
    && for PYTHON3_VERSION in ${PYTHON3_VERSIONS}; do \
        curl -fsSLo /tmp/Python-${PYTHON3_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tgz; \
        tar -C /tmp/ -xzf /tmp/Python-${PYTHON3_VERSION}.tgz; \
        cd /tmp/Python-${PYTHON3_VERSION}; \
        /tmp/Python-${PYTHON3_VERSION}/configure \
            --prefix=/usr \
            --without-static-libpython \
            --enable-shared; \
        make -j$(nproc); \
        make altinstall; \
        rm -rf /tmp/Python-${PYTHON3_VERSION}*; \
    done

# Install a specific version of boost
ARG BOOST_VERSION=1.68.0
RUN set -ex \
    && export boost_version_underscore=$(echo ${BOOST_VERSION} | tr '.' '_') \
    && curl -fsSLo /tmp/boost_${boost_version_underscore}.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.68.0/source/boost_${boost_version_underscore}.tar.gz \
    && tar -C /tmp/ -xzf /tmp/boost_${boost_version_underscore}.tar.gz \
    && cd /tmp/boost_${boost_version_underscore} \
    && ./bootstrap.sh \
    && ./b2 \
        -j $(nproc) \
        variant=release \
        cxxflags="$(echo ${PYTHON3_VERSIONS} | cut -d' ' -f1 | cut -d'.' -f-2 | xargs -I{} echo '-I/usr/include/python{}m' | tr '\n' ' ') -fPIC" \
    && ./b2 install \
        --prefix=/usr \
    && rm -rf /tmp/boost_${boost_version_underscore}*

# Install turtle so we can run unit tests
ENV TURTLE_VERSION 1.3.1
RUN set -ex \
    && curl -fsSLo /tmp/turtle-${TURTLE_VERSION}.tar.gz https://master.dl.sourceforge.net/project/turtle/turtle/${TURTLE_VERSION}/turtle-${TURTLE_VERSION}.tar.gz?viasf=1 \
    && tar -C /usr/local -xzf /tmp/turtle-${TURTLE_VERSION}.tar.gz include \
    && rm -rf /tmp/turtle-${TURTLE_VERSION}*

# Install swig 4
ARG SWIG_VERSION=4.1.1
RUN set -ex \
    && yum -y remove \
        swig \
    && yum -y install \
        pcre2-devel \
    && curl -fsSLo /tmp/swig-${SWIG_VERSION}.tar.gz https://prdownloads.sourceforge.net/swig/swig-${SWIG_VERSION}.tar.gz \
    && tar -C /tmp/ -xzf /tmp/swig-${SWIG_VERSION}.tar.gz \
    && cd /tmp/swig-${SWIG_VERSION} \
    && ./configure \
        --prefix="/usr" \
    && make -j $(nproc) \
    && make install

# Add a user that will be used when shelling into this container and allow them to use devices
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN set -ex \
    && yum install -y \
        sudo \
    && groupadd -g ${USER_ID} microstrain \
    && useradd \
        -N \
        -m \
        -u ${USER_ID} \
        -g ${GROUP_ID} \
        -G "dialout" \
        -s "/bin/bash" \
        microstrain \
    && echo 'microstrain ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
    && echo '. /opt/rh/devtoolset-7/enable' >> /home/microstrain/.bashrc

# Append /usr/lib to LD_LIBRARY_PATH? Feels like we shouldn't need to do this
ENV LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:/usr/lib"