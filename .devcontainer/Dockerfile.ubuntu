ARG ARCH="amd64"
ARG UBUNTU_VERSION="20.04"
FROM ${ARCH}/ubuntu:${UBUNTU_VERSION}

# Add some CA certificates
COPY .devcontainer/extra_cas /usr/local/share/ca-certificates
RUN set -ex \
    && apt-get update && apt-get install -y \
        ca-certificates \
    && update-ca-certificates

# Install some general tools not installed by rosdep
ENV DEBIAN_FRONTEND="noninteractive"
RUN set -ex \
    && apt-get update && apt-get install -y \
        gdb \
        git \
        vim \
        curl \
        make \
        cmake \
        zlib1g-dev \
        subversion \
        build-essential \
        bash-completion

# Install OpenSSL
RUN set -ex \
    && apt-get update && apt-get install -y \
        libssl-dev

# Add some python dependencies
RUN set -ex && apt-get update && apt-get install -y python2-dev || apt-get install -y python-dev

# Install additional python versions
ARG PYTHON3_VERSIONS="3.5.10 3.6.15"
RUN set -ex \
    && for PYTHON3_VERSION in ${PYTHON3_VERSIONS}; do \
        curl -fsSLo /tmp/Python-${PYTHON3_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tgz; \
        tar -C /tmp/ -xzf /tmp/Python-${PYTHON3_VERSION}.tgz; \
        cd /tmp/Python-${PYTHON3_VERSION}; \
        /tmp/Python-${PYTHON3_VERSION}/configure \
            --prefix=/usr \
            --without-static-libpython \
            --enable-shared; \
        make -j$(nproc); \
        make altinstall; \
        rm -rf /tmp/Python-${PYTHON3_VERSION}*; \
    done

# Install a specific version of boost
ARG BOOST_VERSION=1.68.0
RUN set -ex \
    && export boost_version_underscore=$(echo ${BOOST_VERSION} | tr '.' '_') \
    && curl -fsSLo /tmp/boost_${boost_version_underscore}.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.68.0/source/boost_${boost_version_underscore}.tar.gz \
    && tar -C /tmp/ -xzf /tmp/boost_${boost_version_underscore}.tar.gz \
    && cd /tmp/boost_${boost_version_underscore} \
    && ./bootstrap.sh \
    && ./b2 \
        -j $(nproc) \
        variant=release \
        cxxflags="$(echo ${PYTHON3_VERSIONS} | cut -d' ' -f1 | cut -d'.' -f-2 | xargs -I{} echo '-I/usr/include/python{}m' | tr '\n' ' ') -fPIC" \
    && ./b2 install \
        --prefix=/usr \
    && rm -rf /tmp/boost_${boost_version_underscore}*

# Install turtle so we can run unit tests
ENV TURTLE_VERSION 1.3.2
RUN set -ex \
    && curl -fsSLo /tmp/turtle-${TURTLE_VERSION}.tar.gz https://master.dl.sourceforge.net/project/turtle/turtle/${TURTLE_VERSION}/turtle-${TURTLE_VERSION}.tar.gz \
    && tar -C /usr/local -xzf /tmp/turtle-${TURTLE_VERSION}.tar.gz include

# Really sucks that we have to do this, but right now CMake is broken on ARM, but we can fix it if we compile it ourselves
ARG ARCH
RUN set -ex \
    && [ ${ARCH} = "arm32v7" ] \
        && /bin/bash -c ' \
            set -ex && \
            cmake_version=$(cmake --version | head -1 | cut -d" " -f3) && \
            cmake_major_version=$(echo ${cmake_version} | cut -d"." -f-2) && \
            curl -fsSLo /tmp/cmake-${cmake_version}.tar.gz https://cmake.org/files/v${cmake_major_version}/cmake-${cmake_version}.tar.gz && \
            tar -C /tmp/ -xzf /tmp/cmake-${cmake_version}.tar.gz && \
            cd /tmp/cmake-${cmake_version} && \
            export CFLAGS="-D_FILE_OFFSET_BITS=64" && \
            export CXXFLAGS="-D_FILE_OFFSET_BITS=64" && \
            ./bootstrap \
                --prefix="/usr" \
                --parallel=$(nproc) \
                -- \
                -DCMAKE_INSTALL_PREFIX="/usr" \
                -DCMAKE_BUILD_TYPE="RELEASE" \
                -DCMAKE_USE_OPENSSL=OFF && \
            make -j$(nproc) && \
            make install \
        ' \
        || echo "Not arm32, no need to rebuild CMAKE"

# Install powershell which we use for the build scripts
RUN set -ex \
    && apt-get update && apt-get install -y \
        curl \
        gnupg \
        apt-transport-https \
    && curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-bullseye-prod bullseye main" > /etc/apt/sources.list.d/microsoft.list \
    && apt-get update && apt-get install -y \
        powershell

# Install swig
RUN set -ex \
    && apt-get update && apt-get install -y \
        swig

# Dependencies required by dpkg in order to build the deb package
RUN set -ex \
    && apt-get update && apt-get install -y \
        debhelper

# Add a user that will be used when shelling into this container and allow them to use devices
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN set -ex \
    && apt-get update && apt-get install -y \
        sudo \
    && groupadd -g ${USER_ID} microstrain \
    && useradd \
        -N \
        -m \
        -u ${USER_ID} \
        -g ${GROUP_ID} \
        -G "dialout" \
        -s "/bin/bash" \
        microstrain \
    && echo 'microstrain ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
