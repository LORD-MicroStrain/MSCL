NDSummary.OnToolTipsLoaded("File:MicroStrain/Wireless/WirelessNode.h",{5621:"<div class=\"NDToolTip TClass LC\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype5621\"><div class=\"CPEntry TClass Current\"><div class=\"CPName\">WirelessNode</div></div></div><div class=\"TTSummary\">A class representing a MicroStrain wireless node</div></div>",5623:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5623\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessNode(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">NodeAddress&nbsp;</td><td></td><td class=\"PName last\">nodeAddress,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">BaseStation&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">basestation</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Creates a WirelessNode object</div></div>",5624:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5624\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> ~WirelessNode()</div><div class=\"TTSummary\">Destroys a WirelessNode object</div></div>",5625:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5625\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static</span> WirelessNode Mock(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">NodeAddress&nbsp;</td><td></td><td class=\"PName last\">nodeAddress,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">BaseStation&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">basestation,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">NodeInfo&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">info</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Static function to create a Mock WirelessNode (won\'t actually talk to a physical device).</div></div>",5626:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5626\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static</span> WirelessNode Mock(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\">NodeAddress&nbsp;</td><td></td><td class=\"PName last\">nodeAddress,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">BaseStation&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">basestation,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">NodeInfo&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">info,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span> WirelessTypes::</td><td class=\"PType\">EepromMap&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">initialEepromCache</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Static function to create a Mock WirelessNode (won\'t actually talk to a physical device).</div></div>",5628:"<div class=\"NDToolTip TVariable LC\"><div id=\"NDPrototype5628\" class=\"NDPrototype NoParameterForm\">std::shared_ptr&lt;WirelessNode_Impl&gt; m_impl</div><div class=\"TTSummary\">The WirelessNode_Impl class that contains all the implementation logic for the WirelessNode class.</div></div>",5630:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5630\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">static</span> std::<span class=\"SHKeyword\">string</span> deviceName(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">NodeAddress&nbsp;</td><td class=\"PName last\">nodeAddress</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Static function for creating the universal sensor name that should be used for SensorCloud.</div></div>",5631:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5631\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">const</span> NodeFeatures&amp; features() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets a reference to the NodeFeatures for this Node.&nbsp; Note: This will be invalid when the WirelessNode is destroyed.</div></div>",5632:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5632\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">const</span> Timestamp&amp; lastCommunicationTime() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the Timestamp for the last time MSCL communicated with the Node.&nbsp; Note: EEPROM reads using the cache will not update this timestamp.</div></div>",5633:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5633\" class=\"NDPrototype NoParameterForm\">DeviceState lastDeviceState() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the last known DeviceState for the Node.&nbsp; This device state is updated by diagnostic packets, as well as when operations are performed by MSCL, such as setting a Node to idle.</div></div>",5634:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5634\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> setBaseStation(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">BaseStation&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">basestation</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Sets the node\'s parent Base Station, which will perform all communication with the node</div></div>",5635:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5635\" class=\"NDPrototype NoParameterForm\">BaseStation&amp; getBaseStation()</div><div class=\"TTSummary\">Gets a reference to the BaseStation that is assigned to this Node.</div></div>",5636:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5636\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> hasBaseStation(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">BaseStation&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">basestation</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Checks whether the given BaseStation is the same BaseStation that is assigned to this Node.</div></div>",5637:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5637\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> useGroupRead(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">useGroup</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Enables or disables the use of group eeprom read when trying to read a single value (enabled by default).&nbsp; Note:&nbsp; In most cases, leaving this enabled will provide better performance, allowing the cache to be built quicker, requiring less communication to the actual device. However, in some cases such as with very high traffic, it may be beneficial to restrict reads to use the single commands, as the packets are smaller over the air.</div></div>",5638:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5638\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> readWriteRetries(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">uint8</span>&nbsp;</td><td class=\"PName last\">numRetries</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Sets the number of retry attempts for reading and writing config options with the Node.&nbsp; By default, the number of retries is 0.&nbsp; Note:&nbsp; The timeout that is set per command will be per read and write attempt, meaning this retry number is multiplied by the timeout for your overall timeout.</div></div>",5639:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5639\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint8</span> readWriteRetries() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the number of retry attempts for reading and writing config options with the Node.&nbsp; By default, the number of retries is 0.&nbsp; Note:&nbsp; The timeout that is set per command will be per read and write attempt, meaning this retry number is multiplied by the timeout for your overall timeout.</div></div>",5640:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5640\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> useEepromCache(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">bool</span>&nbsp;</td><td class=\"PName last\">useCache</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Sets whether or not to utilize the eeprom cache when configuring this Node (enabled by default). This can be enabled/disabled at any time.&nbsp; It is highly recommended to have eeprom caching be enabled.&nbsp; Note:&nbsp; The eeprom cache stores the last known value that was written to / read from the Node for each eeprom location. If this is enabled, any reads will get the last known value from the cache if it exists, and any writes will not write to the Node if the value attempting to be written is the same as that stored in the cache. Caching of these values will still be performed if this is disabled, however, read and write operations will then always reach out to the actual device.</div></div>",5641:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5641\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">void</span> clearEepromCache()</div><div class=\"TTSummary\">Clears the eeprom cache for this Node.</div></div>",5642:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5642\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> updateEepromCacheFromNodeDiscovery(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">NodeDiscovery&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">nodeDisovery</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Updates the Node\'s eeprom cache with information from the NodeDiscovery object.&nbsp; Note: Take caution when using this function that the NodeDiscovery object actually belongs to this WirelessNode.</div></div>",5643:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5643\" class=\"NDPrototype NoParameterForm\">WirelessTypes::EepromMap getEepromCache() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets a copy of the eeprom cache as a WirelessTypes::EepromMap.</div></div>",5644:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5644\" class=\"NDPrototype NoParameterForm\">NodeAddress nodeAddress() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the node address of the Node.</div></div>",5645:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5645\" class=\"NDPrototype NoParameterForm\">WirelessTypes::Frequency frequency() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the frequency that the Node is on.</div></div>",5646:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5646\" class=\"NDPrototype NoParameterForm\">WirelessTypes::CommProtocol communicationProtocol() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::CommProtocol that the Node is currently set to use.</div></div>",5647:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5647\" class=\"NDPrototype NoParameterForm\">Version firmwareVersion() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the firmware version of the Node.</div></div>",5648:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5648\" class=\"NDPrototype NoParameterForm\">WirelessModels::NodeModel model() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the model of the Node.</div></div>",5649:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5649\" class=\"NDPrototype NoParameterForm\">std::<span class=\"SHKeyword\">string</span> serial() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the serial number of the Node.</div></div>",5650:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5650\" class=\"NDPrototype NoParameterForm\">std::<span class=\"SHKeyword\">string</span> name() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the name of the Node. This is the universal sensor name that should be used for uploading to SensorCloud.&nbsp; This is the same as calling WirelessNode::deviceName.</div></div>",5651:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5651\" class=\"NDPrototype NoParameterForm\">WirelessTypes::MicroControllerType microcontroller() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the microcontroller of the Node.</div></div>",5652:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5652\" class=\"NDPrototype NoParameterForm\">RadioFeatures radioFeatures() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the RadioFeatures of the Node.</div></div>",5653:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5653\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint64</span> dataStorageSize() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the number of bytes available for data storage on the Node.</div></div>",5654:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5654\" class=\"NDPrototype NoParameterForm\">WirelessTypes::RegionCode regionCode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the region code currently set on the Node.</div></div>",5655:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5655\" class=\"NDPrototype NoParameterForm\">PingResponse ping()</div><div class=\"TTSummary\">Performs a Long Ping command on the Node to check the communication between the Base Station and the Node.&nbsp; The response to this command contains the Node and BaseStation RSSI values.</div></div>",5656:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5656\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">bool</span> sleep()</div><div class=\"TTSummary\">Puts the Node into a low power, sleep mode.&nbsp; This command attempts to ping the node before sending the sleep command, to verify communication.</div></div>",5657:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5657\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">void</span> cyclePower()</div><div class=\"TTSummary\">Cycles the power on the Node.&nbsp; Many configuration changes that are applied to the node do not take affect until the power is cycled.</div></div>",5658:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5658\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">void</span> resetRadio()</div><div class=\"TTSummary\">Resets the radio on the Node.</div></div>",5659:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5659\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> changeFrequency(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">WirelessTypes::</td><td class=\"PType\">Frequency&nbsp;</td><td class=\"PName last\">frequency</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Changes the radio frequency of the Node.&nbsp; Note: If successful, the Node will be put onto a different frequency than its parent base station.&nbsp; It is up to the user of MSCL to switch the base station to this frequency if you wish to communicate with it.</div></div>",5660:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5660\" class=\"NDPrototype NoParameterForm\">SetToIdleStatus setToIdle()</div><div class=\"TTSummary\">Attempts to set the Node to the Idle state.&nbsp; This will stop the node from sampling or sleeping, and put it into an idle state so that it may be communicated with (configured, started sampling, etc).&nbsp; This operation may take several seconds to complete. The returned SetToIdleStatus object may be used to determine the current status of the Set to Idle operation.</div></div>",5661:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5661\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">void</span> erase()</div><div class=\"TTSummary\">Erases all logged data on the Node.&nbsp; Note: Erasing the data on the Node may take up to 30 seconds to complete for some devices.&nbsp; This command will return immediately while the Node is being erased.&nbsp; If you wish to check the status of the Erase operation, you can continuously ping the Node. A successful ping means the erase has completed.</div></div>",5662:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5662\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">bool</span> startNonSyncSampling()</div><div class=\"TTSummary\">Starts the Node in Non-Synchronized Sampling Mode.&nbsp; This will immediately start the Node sampling, with the current Sampling settings that are applied to the Node.&nbsp; Note: To start the Node in Synchronized Sampling Mode, use the SyncSamplingNetwork class.</div></div>",5663:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5663\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">bool</span> resendStartSyncSampling()</div><div class=\"TTSummary\">Important!: Use the SyncSamplingNetwork to start a Node in Sync Sampling mode.&nbsp; Advanced Function that sends the Start Sync Sampling command to the individual Node. This command is useful when you have already used the SyncSamplingNetwork object to start a network of Nodes, but need to resend the start command to a Node. For instance, if you had to set a node to idle, and haven\'t changed any configuration settings. Note that this command does not enable a beacon, which is needed for a Sync Sampling network to be running.&nbsp; Warning: This function is rarely what you want to use to start Sync Sampling. Instead, you should create a SyncSamplingNetwork object.&nbsp; Failing to use the SyncSamplingNetwork object can cause the network to be misconfigured, and result in loss of data.</div></div>",5664:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5664\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">void</span> clearHistogram()</div><div class=\"TTSummary\">Clears the Histogram on the Node.&nbsp; See Also: NodeFeatures::supportsHistogramConfig</div></div>",5665:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5665\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">AutoBalanceResult autoBalance(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask,</td></tr><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">float</span>&nbsp;</td><td></td><td class=\"PName last\">targetPercent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Performs an Auto Balance command on a specified channel on the Node.&nbsp; This adjusts the sensor offset for differential channels to affect range.</div></div>",5666:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5666\" class=\"NDPrototype NoParameterForm\">AutoCalResult_shmLink autoCal_shmLink()</div><div class=\"TTSummary\">Performs automatic calibration for the SHM-Link Wireless Node.&nbsp; See Also: NodeFeatures::supportsAutoCal_shm</div></div>",5667:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5667\" class=\"NDPrototype NoParameterForm\">AutoCalResult_shmLink201 autoCal_shmLink201()</div><div class=\"TTSummary\">Performs automatic calibration for the SHM-Link-201 Wireless Node.&nbsp; See Also: NodeFeatures::supportsAutoCal_shm201</div></div>",5668:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5668\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">AutoShuntCalResult autoShuntCal(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ShuntCalCmdInfo&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">commandInfo</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Performs automatic shunt calibration for a specified ChannelMask on supported Nodes.</div></div>",5669:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5669\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">uint16</span> readEeprom(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">uint16</span>&nbsp;</td><td class=\"PName last\">location</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads a uint16 from the given eeprom location of the node. This may use a page download or a read eeprom command.&nbsp; If the value stored in the eeprom cache is still valid, this will be returned instead.&nbsp; Note: This is an advanced command. In most cases you should use the built in commands for reading a Node\'s configuration options.</div></div>",5670:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5670\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> writeEeprom(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">uint16</span>&nbsp;</td><td class=\"PName last\">location,</td></tr><tr><td class=\"PType first\"><span class=\"SHKeyword\">uint16</span>&nbsp;</td><td class=\"PName last\">value</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Writes a uint16 to the given eeprom location of the node.&nbsp; If successful, the cache will be updated with the changed value as well.&nbsp; Note: This is an advanced command. In most cases you should use the built in commands for changing a Node\'s configuration options.</div></div>",5671:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5671\" class=\"NDPrototype NoParameterForm\">ChannelData getDiagnosticInfo()</div><div class=\"TTSummary\">Performs an immediate request for the Node\'s Diagnostic Info.&nbsp; Note: Nodes can also be configured to transmit Diagnostic Info data packets at a specified Diagnostic Interval via the WirelessNodeConfig object.</div></div>",5672:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5672\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> testCommunicationProtocol(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">WirelessTypes::</td><td class=\"PType\">CommProtocol&nbsp;</td><td class=\"PName last\">protocol</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Tests if the Node will still be able to communicate after changing the Node\'s communication protocol.&nbsp; This is recommended to be used before changing communication protocol as the range can change between protocol modes.&nbsp; Note: Both the Node and BaseStation will return to the current protocol after this test.</div></div>",5673:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5673\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> verifyConfig(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">WirelessNodeConfig&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">config,</td></tr><tr><td class=\"first\"></td><td class=\"PType\">ConfigIssues&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">outIssues</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Checks whether the settings in the given WirelessNodeConfig are ok to be written to the Node.&nbsp; Options that are set will also be validated against each other. If an option that needs to be validated isn\'t currently set, it will be read from the Node.&nbsp; (ex. if sample rate is set, but sampling mode isn\'t, the sampling mode will be read from the Node for validating the sample rate)</div></div>",5674:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5674\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">void</span> applyConfig(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">WirelessNodeConfig&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">config</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Applies a WirelessNodeConfig to the Node.&nbsp; Note: This applies all options that have been set in the WirelessNodeConfig.&nbsp; Before applying, the options will be validated. It is recommended that you perform this validation yourself first by using verifyConfig.</div></div>",5675:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5675\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getNumDatalogSessions() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the number of datalog sessions that are currently stored on the Node.</div></div>",5676:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5676\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">float</span> percentFull() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the internal datalogging memory percentage that is currently stored on the Node.</div></div>",5677:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5677\" class=\"NDPrototype NoParameterForm\">WirelessTypes::DefaultMode getDefaultMode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::DefaultMode that is currently set on the Node.</div></div>",5678:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5678\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getInactivityTimeout() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the user inactivity timeout that is currently set on the Node.&nbsp; This controls how many seconds before the Node goes to sleep when idle.</div></div>",5679:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5679\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint8</span> getCheckRadioInterval() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the check radio interval that is currently set on the Node.&nbsp; This controls how often the Node wakes up from sleep to check for commands.</div></div>",5680:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5680\" class=\"NDPrototype NoParameterForm\">WirelessTypes::TransmitPower getTransmitPower() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::TransmitPower that is currently set on the Node.</div></div>",5681:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5681\" class=\"NDPrototype NoParameterForm\">WirelessTypes::SamplingMode getSamplingMode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::SamplingMode that is currently set on the Node.</div></div>",5682:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5682\" class=\"NDPrototype NoParameterForm\">ChannelMask getActiveChannels() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the ChannelMask currently set on the Node, representing which channels are enabled and disabled.</div></div>",5683:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5683\" class=\"NDPrototype NoParameterForm\">WirelessTypes::WirelessSampleRate getSampleRate() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::WirelessSampleRate currently set on the Node.</div></div>",5684:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5684\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint32</span> getNumSweeps() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the number of sweeps currently set on the Node, which affects the duration of sampling if unlimited duration is disabled, or the duration of each burst if the sampling mode is Sync Sampling Burst.</div></div>",5685:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5685\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">bool</span> getUnlimitedDuration() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets whether or not unlimited sampling duration is enabled on the Node.</div></div>",5686:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5686\" class=\"NDPrototype NoParameterForm\">WirelessTypes::DataFormat getDataFormat() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::DataFormat that is currently set on the Node.</div></div>",5687:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5687\" class=\"NDPrototype NoParameterForm\">WirelessTypes::DataCollectionMethod getDataCollectionMethod() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::DataCollectionMethod that is currently set on the Node, representing how the data will be collected.&nbsp; Note: this has no affect if the sampling mode is Armed Datalogging, as this mode only operates in &quot;log only&quot;.</div></div>",5688:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5688\" class=\"NDPrototype NoParameterForm\">TimeSpan getTimeBetweenBursts() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the amount of time between each burst currently set on the Node.&nbsp; This is only used if the sampling mode is Synchronized Sampling Burst.</div></div>",5689:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5689\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getLostBeaconTimeout() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the lost beacon timeout, in minutes, currently set on the Node.&nbsp; If the Node is Sync Sampling and loses the beacon for a length of time greater than this value, then the node drops into a sleep mode. The Node will re-enter sync sampling within 2 minutes of the beacon reappearing.&nbsp; Note: A value of 0 means the lost beacon timeout is disabled.&nbsp; See Also: NodeFeatures::supportsLostBeaconTimeout</div></div>",5690:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5690\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::InputRange getInputRange(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the Input Range of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsInputRange</div></div>",5691:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5691\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">uint16</span> getHardwareOffset(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the hardware offset of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsHardwareOffset</div></div>",5692:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5692\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::Filter getAntiAliasingFilter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the Anti-Aliasing Filter of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsAntiAliasingFilter</div></div>",5693:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5693\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::Filter getLowPassFilter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the Low-Pass Filter of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsLowPassFilter</div></div>",5694:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5694\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::HighPassFilter getHighPassFilter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the High-Pass Filter of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsHighPassFilter</div></div>",5695:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5695\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">uint16</span> getDebounceFilter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the Debounce Filter of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsDebounceFilter</div></div>",5696:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5696\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">bool</span> getPullUpResistor(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Gets whether or not the pull-up resistor is enabled on the Node.</div></div>",5697:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5697\" class=\"NDPrototype NoParameterForm\">WirelessTypes::SensorOutputMode getSensorOutputMode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Gets the WirelessTypes::SensorOutputMode currently set on the Node.</div></div>",5698:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5698\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">float</span> getGaugeFactor(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the gauge factor of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups, NodeFeatures::supportsGaugeFactor</div></div>",5699:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5699\" class=\"NDPrototype NoParameterForm\">WirelessTypes::Voltage getExcitationVoltage() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the Excitation WirelessTypes::Voltage currently set on the Node.</div></div>",5700:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5700\" class=\"NDPrototype NoParameterForm\">WirelessTypes::Voltage getAdcVoltageRef() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the ADC WirelessTypes::Voltage Reference of the Node.</div></div>",5701:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5701\" class=\"NDPrototype NoParameterForm\">WirelessTypes::Voltage getGainAmplifierVoltageRef() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the Gain Amplifier WirelessTypes::Voltage Reference of the Node.</div></div>",5702:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5702\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getGaugeResistance() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the gauge resistance currently set on the Node.&nbsp; See Also: NodeFeatures::supportsGaugeResistance</div></div>",5703:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5703\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getNumActiveGauges() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the Number of Active Gauges currently set on the Node.&nbsp; See Also: NodeFeatures::supportsNumActiveGauges</div></div>",5704:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5704\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">float</span> getLowBatteryThreshold() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the threshold at which the low battery diagnostic flag is sent.</div></div>",5705:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5705\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">LinearEquation getLinearEquation(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Gets the linear equation of the specified ChannelMask currently set on the Node.</div></div>",5706:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5706\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::CalCoef_Unit getUnit(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the unit of the specified ChannelMask currently set on the Node.&nbsp; Note: This unit is just used for reference (such as when downloading logged data) and does not affect the actual data value.</div></div>",5707:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5707\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::CalCoef_EquationType getEquationType(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the WirelessTypes::CalCoef_EquationType of the specified ChannelMask currently set on the Node.</div></div>",5708:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5708\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::SettlingTime getFilterSettlingTime(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Gets the filter settling time of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups</div></div>",5709:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5709\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">WirelessTypes::ThermocoupleType getThermocoupleType(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the WirelessTypes::ThermocoupleType of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups</div></div>",5710:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5710\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">TempSensorOptions getTempSensorOptions(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">const</span>&nbsp;</td><td class=\"PType\">ChannelMask&nbsp;</td><td class=\"PNamePrefix\">&amp;</td><td class=\"PName last\">mask</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the TempSensorOptions of the specified ChannelMask currently set on the Node.&nbsp; See Also: NodeFeatures::channelGroups</div></div>",5711:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5711\" class=\"NDPrototype NoParameterForm\">FatigueOptions getFatigueOptions() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the FatigueOptions currently set on the Node.&nbsp; See Also: NodeFeatures::supportsFatigueConfig</div></div>",5712:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5712\" class=\"NDPrototype NoParameterForm\">HistogramOptions getHistogramOptions() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the HistogramOptions currently set on the Node.&nbsp; See Also: NodeFeatures::supportsHistogramConfig</div></div>",5713:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5713\" class=\"NDPrototype NoParameterForm\">ActivitySense getActivitySense() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the ActivitySense options currently set on the Node.&nbsp; See Also: NodeFeatures::supportsActivitySense</div></div>",5714:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5714\" class=\"NDPrototype NoParameterForm\">EventTriggerOptions getEventTriggerOptions() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the EventTriggerOptions currently set on the Node.&nbsp; See Also: NodeFeatures::supportsEventTrigger</div></div>",5715:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5715\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint16</span> getDiagnosticInterval() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the interval (in seconds) at which the diagnostic info is configured to be sent.&nbsp; See Also: NodeFeatures::supportsDiagnosticInfo</div></div>",5716:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5716\" class=\"NDPrototype NoParameterForm\">WirelessTypes::StorageLimitMode getStorageLimitMode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::StorageLimitMode that the Node is configured for.&nbsp; This determines what happens when the datalogging storage limit is reached on the Node.</div></div>",5717:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5717\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">uint32</span> getSensorDelay() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the sensor delay (in microseconds) that is currently set on the Node.&nbsp; Note: A value of &lt;WirelessNodeConfig::SENSOR_DELAY_ALWAYS_ON&gt; indicates that the sensor is always on.</div></div>",5718:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5718\" class=\"NDPrototype NoParameterForm\">WirelessTypes::DataMode getDataMode() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::DataMode that is currently set on the Node.</div></div>",5719:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5719\" class=\"NDPrototype NoParameterForm\">WirelessTypes::WirelessSampleRate getDerivedDataRate() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::WirelessSampleRate for all Derived Data Channels that is currently set on the Node.</div></div>",5720:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5720\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">ChannelMask getDerivedChannelMask(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">WirelessTypes::</td><td class=\"PType\">DerivedCategory&nbsp;</td><td class=\"PName last\">category</td></tr></table></td><td class=\"PAfterParameters\">) <span class=\"SHKeyword\">const</span></td></tr></table></div><div class=\"TTSummary\">Reads the ChannelMask for an individual WirelessTypes::DerivedCategory that is currently set on the Node.&nbsp; This represents which of the actual Node\'s channels are set to be mapped to derived channels.&nbsp; For example, if the mask for RMS has ch1 and ch3 active, ch1RMS and ch3RMS channels will be output.</div></div>",5721:"<div class=\"NDToolTip TFunction LC\"><div id=\"NDPrototype5721\" class=\"NDPrototype NoParameterForm\">WirelessTypes::DerivedVelocityUnit getDerivedVelocityUnit() <span class=\"SHKeyword\">const</span></div><div class=\"TTSummary\">Reads the WirelessTypes::DerivedVelocityUnit which indicates which unit the Velocity derived channel is set to.</div></div>"});