//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class AidingMeasurementHeading : AidingMeasurementInput {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AidingMeasurementHeading(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.AidingMeasurementHeading_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidingMeasurementHeading obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_AidingMeasurementHeading(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public AidingMeasurementHeading() : this(msclPINVOKE.new_AidingMeasurementHeading__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidingMeasurementHeading(MipFieldValues values) : this(msclPINVOKE.new_AidingMeasurementHeading__SWIG_1(MipFieldValues.getCPtr(values)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float heading() {
    float ret = msclPINVOKE.AidingMeasurementHeading_heading__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void heading(float heading) {
    msclPINVOKE.AidingMeasurementHeading_heading__SWIG_1(swigCPtr, heading);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public float uncertainty() {
    float ret = msclPINVOKE.AidingMeasurementHeading_uncertainty__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void uncertainty(float uncertainty) {
    msclPINVOKE.AidingMeasurementHeading_uncertainty__SWIG_1(swigCPtr, uncertainty);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool valid() {
    bool ret = msclPINVOKE.AidingMeasurementHeading_valid__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void valid(bool valid) {
    msclPINVOKE.AidingMeasurementHeading_valid__SWIG_1(swigCPtr, valid);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
