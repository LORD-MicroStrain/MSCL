//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class Rotation : Vector {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Rotation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(msclPINVOKE.Rotation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Rotation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          msclPINVOKE.delete_Rotation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Rotation() : this(msclPINVOKE.new_Rotation__SWIG_0(), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation(EulerAngles angles) : this(msclPINVOKE.new_Rotation__SWIG_1(EulerAngles.getCPtr(angles)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation(Quaternion quat) : this(msclPINVOKE.new_Rotation__SWIG_2(Quaternion.getCPtr(quat)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation(MipFieldValues data, byte offset) : this(msclPINVOKE.new_Rotation__SWIG_3(MipFieldValues.getCPtr(data), offset), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation(MipFieldValues data) : this(msclPINVOKE.new_Rotation__SWIG_4(MipFieldValues.getCPtr(data)), true) {
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Rotation FromEulerAngles(EulerAngles angles) {
    Rotation ret = new Rotation(msclPINVOKE.Rotation_FromEulerAngles(EulerAngles.getCPtr(angles)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Rotation FromQuaternion(Quaternion quat) {
    Rotation ret = new Rotation(msclPINVOKE.Rotation_FromQuaternion(Quaternion.getCPtr(quat)), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EulerAngles asEulerAngles() {
    EulerAngles ret = new EulerAngles(msclPINVOKE.Rotation_asEulerAngles(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Quaternion asQuaternion() {
    Quaternion ret = new Quaternion(msclPINVOKE.Rotation_asQuaternion(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipFieldValues asMipFieldValues(bool includeFormat) {
    MipFieldValues ret = new MipFieldValues(msclPINVOKE.Rotation_asMipFieldValues__SWIG_0(swigCPtr, includeFormat), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MipFieldValues asMipFieldValues() {
    MipFieldValues ret = new MipFieldValues(msclPINVOKE.Rotation_asMipFieldValues__SWIG_1(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void appendMipFieldValues(MipFieldValues appendTo, bool includeFormat) {
    msclPINVOKE.Rotation_appendMipFieldValues__SWIG_0(swigCPtr, MipFieldValues.getCPtr(appendTo), includeFormat);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public void appendMipFieldValues(MipFieldValues appendTo) {
    msclPINVOKE.Rotation_appendMipFieldValues__SWIG_1(swigCPtr, MipFieldValues.getCPtr(appendTo));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rotation.Format format() {
    Rotation.Format ret = (Rotation.Format)msclPINVOKE.Rotation_format(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Format {
    EULER_ANGLES = 1,
    QUATERNION = 2
  }

}

}
