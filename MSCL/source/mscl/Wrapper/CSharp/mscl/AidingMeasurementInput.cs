//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace mscl {

public class AidingMeasurementInput : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidingMeasurementInput(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidingMeasurementInput obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidingMeasurementInput() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MipFieldValues toMipFieldValues() {
    MipFieldValues ret = new MipFieldValues(msclPINVOKE.AidingMeasurementInput_toMipFieldValues(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Timestamp timestamp() {
    Timestamp ret = new Timestamp(msclPINVOKE.AidingMeasurementInput_timestamp__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void timestamp(Timestamp ts) {
    msclPINVOKE.AidingMeasurementInput_timestamp__SWIG_1(swigCPtr, Timestamp.getCPtr(ts));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Timestamp.Epoch timebase() {
    Timestamp.Epoch ret = (Timestamp.Epoch)msclPINVOKE.AidingMeasurementInput_timebase(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte sensorId() {
    byte ret = msclPINVOKE.AidingMeasurementInput_sensorId__SWIG_0(swigCPtr);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sensorId(byte id) {
    msclPINVOKE.AidingMeasurementInput_sensorId__SWIG_1(swigCPtr, id);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public Bitfield validFlags() {
    Bitfield ret = new Bitfield(msclPINVOKE.AidingMeasurementInput_validFlags__SWIG_0(swigCPtr), true);
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void validFlags(Bitfield flags) {
    msclPINVOKE.AidingMeasurementInput_validFlags__SWIG_1(swigCPtr, Bitfield.getCPtr(flags));
    if (msclPINVOKE.SWIGPendingException.Pending) throw msclPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum ResponseMode {
    ACK_NACK = 0x01,
    ECHO_INPUT = 0x02
  }

}

}
