import swig ;
import python ;
import cast ;
import path ;
import common ;
import set ;
import "class" : new ;
import type ;
import project ;
import targets ;

#Setup path variables
path-constant SWIG_PYTHON : $(BUILD_DIR)/swig-python ;

rule disabled-functions
{
  local valid-parameters = ssl websockets ;
  local argv = [ modules.peek : ARGV ] ;
  local without-parameters = [ MATCH ^--without-(.*) : $(argv) ] ;

  # make sure there are no invalid paremeters
  local wrong = [ set.difference $(without-parameters) : $(valid-parameters) ] ;
  if $(wrong)
  {
    EXIT "error: invalid without parameter --without-$(wrong[1])" ;
  }

  return $(without-parameters) ;
}

rule libraries
{
  local configurable-libraries = ssl ;
  local disabled = [ disabled-functions ] ;
  local libraries ;
  if ! ssl in $(disabled)
  {
    libraries += ssl crypto ;
  }
  return $(libraries) ;
}

rule compileflags
{
  local disabled = [ disabled-functions ] ;
  local flags ;

  # ssl
  if ssl in $(disabled)
  {
    flags += -DMSCL_DISABLE_SSL ;
  }

  # websockets
  if websockets in $(disabled)
  {
    flags += -DMSCL_DISABLE_WEBSOCKETS ;
  }

  return $(flags) ;
}

rule boost-libs 
{
    local boostlib ;
    if --static in [ modules.peek : ARGV ]
    {
        #TODO: Figure out if we need pthread and the libraries rules as defined below
        boostlib = boost_system/<link>static boost_filesystem/<link>static ;
        ECHO "Using statically linked dependencies" ;
    }
    else
    {
        boostlib = boost_system boost_filesystem pthread [ libraries ] ;
        ECHO "NOT using statically linked dependencies" ;
    }

    return $(boostlib) ;
}

local configured-flags = [ compileflags ] ;

#Define the project
project
	: usage-requirements <include>source <cflags>"$(configured-flags)"
	;

#Define libraries that exist on the system
lib boost_system ;
lib boost_filesystem ;
lib ssl ;
lib crypto ;
lib pthread ;

#cpp-pch stdafx : source/stdafx.h ; #TODO: Trying to get Precompiled Headers to work


#Windows aliases
alias unixsocket_cpp : : <target-os>windows ;
alias upnp_files : source/mscl/Communication/WsdaFinder.h source/mscl/Communication/WsdaFinder.cpp source/mscl/Communication/UpnpService.h source/mscl/Communication/UpnpService.cpp source/mscl/Communication/UpnpDeviceFinderCallback.h source/mscl/Communication/UpnpDeviceFinderCallback.cpp : <target-os>windows ;
alias boostLibs : : <target-os>windows ;

#linux aliases
alias unixsocket_cpp : source/mscl/Communication/UnixSocketConnection.cpp : <target-os>linux ;
alias upnp_files : : <target-os>linux ;
alias boostLibs : [ boost-libs ] : <target-os>linux ;

#darwin aliases
alias unixsocket_cpp : source/mscl/Communication/UnixSocketConnection.cpp : <target-os>darwin ;
alias upnp_files : : <target-os>darwin ;
alias boostLibs : [ boost-libs ] : <target-os>darwin ;

alias msclSrcs
:   [ glob source/*.cpp ]
	[ glob source/mscl/*.cpp ]
	[ glob source/mscl/Communication/*.cpp : source/mscl/Communication/UnixSocketConnection.cpp source/mscl/Communication/WsdaFinder.h source/mscl/Communication/WsdaFinder.cpp source/mscl/Communication/UpnpService.h source/mscl/Communication/UpnpService.cpp source/mscl/Communication/UpnpDeviceFinderCallback.h source/mscl/Communication/UpnpDeviceFinderCallback.cpp ]
	[ glob source/mscl/MicroStrain/*.cpp ]
	[ glob source/mscl/MicroStrain/Inertial/*.cpp ]
	[ glob source/mscl/MicroStrain/Inertial/Commands/*.cpp ]
	[ glob source/mscl/MicroStrain/Inertial/Packets/*.cpp ]
	[ glob source/mscl/MicroStrain/Displacement/*.cpp ]
	[ glob source/mscl/MicroStrain/Displacement/Commands/*.cpp ]
	[ glob source/mscl/MicroStrain/RTK/*.cpp ]
	[ glob source/mscl/MicroStrain/RTK/Commands/*.cpp ]
	[ glob source/mscl/MicroStrain/MIP/*.cpp ]
	[ glob source/mscl/MicroStrain/MIP/Commands/*.cpp ]
	[ glob source/mscl/MicroStrain/MIP/Packets/*.cpp ]
	[ glob source/mscl/MicroStrain/Wireless/*.cpp ]
	[ glob source/mscl/MicroStrain/Wireless/Commands/*.cpp ]
	[ glob source/mscl/MicroStrain/Wireless/Configuration/*.cpp ]
	[ glob source/mscl/MicroStrain/Wireless/Features/*.cpp ]
	[ glob source/mscl/MicroStrain/Wireless/Packets/*.cpp ]
	unixsocket_cpp
	upnp_files
;

#Define how we build the C++ library
lib mscl
:	msclSrcs
	boostLibs
:	<include>source
	<target-os>linux:<define>UNIX_BUILD
	<target-os>darwin:<define>UNIX_BUILD
    ;

#Ensure that the python output folder exists
make $(SWIG_PYTHON) : : @common.mkdir ;

#Setup dependencies for the mscl python project
DEPENDS _mscl : $(SWIG_PYTHON) ;

alias MSCL_Main_Interface.cpp : [ cast _ swigi : source/mscl/Wrapper/MSCL_Main_Interface.i ] ;   #Reference the .i file as a swig_i file

# Register a type so we can remove the prefix
type.register MSCL_PYTHON_EXTENSION : : SHARED_LIB ;
type.set-generated-target-prefix MSCL_PYTHON_EXTENSION : : "" ;

rule mscl-python-extension ( name : sources * : requirements * : default-build * :
                        usage-requirements * )
{
    local project = [ project.current ] ;

    targets.main-target-alternative
        [ new typed-target $(name) : $(project) : MSCL_PYTHON_EXTENSION
            : [ targets.main-target-sources $(sources) : $(name) ]
            : [ targets.main-target-requirements $(requirements) : $(project) ]
            : [ targets.main-target-default-build $(default-build) : $(project) ]
        ] ;
}

#Define the python mscl build
mscl-python-extension _mscl
:	MSCL_Main_Interface.cpp
	msclSrcs                                                        #Include the MSCL Source
	boostLibs
:	<include>source/mscl/Wrapper/
	<swig-options>-python
	<swig-options>-modern
	<swig-options>"-outdir \"$(SWIG_PYTHON)\""
	<swig-options>"$(configured-flags)"
	<cflags>"$(configured-flags)"
	<target-os>linux:<swig-options>-DUNIX_BUILD
	<target-os>linux:<define>UNIX_BUILD
	<target-os>darwin:<swig-options>-DUNIX_BUILD
	<target-os>darwin:<define>UNIX_BUILD
;

#Copy all the header files and put them in an output directory
install stage_headers
	: [ glob-tree *.h : .svn stdafx.h ]
	: <location>$(STAGING_DIR)/include <install-source-root>source
;
explicit stage_headers ;

#Copy the lib directory
install stage_c++
	: mscl
    : <variant>release:<location>$(STAGING_DIR)/C++/Release
	  <variant>debug:<location>$(STAGING_DIR)/C++/Debug
;
explicit stage_c++ ;

#Copy the python directory
install stage_python
	: _mscl [ path.glob-tree $(SWIG_PYTHON) : *.py ]
	: <location>$(STAGING_DIR)/Python/
;
explicit stage_python ;

#Copy the python (x86) directory
install stage_python_x86
	: _mscl [ path.glob-tree $(SWIG_PYTHON) : *.py ]
	: <location>$(STAGING_DIR)/Python/x86
;
explicit stage_python_x86 ;

#Copy the python directory
install stage_python_x64
	: _mscl [ path.glob-tree $(SWIG_PYTHON) : *.py ]
	: <location>$(STAGING_DIR)/Python/x64
;
explicit stage_python_x64 ;

#Make an alias for all of the copying
alias stage_all
	: stage_c++ stage_python_x86 stage_python_x64 #stage_headers
;
explicit stage_all ;